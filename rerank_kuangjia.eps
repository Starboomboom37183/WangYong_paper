%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: rerank_final_3.pdf
%%Creator: Adobe Acrobat 17.11.0
%%For: wangyong
%%CreationDate: 2018/8/27, 22:11:33
%%BoundingBox: -1 0 435 252
%%HiResBoundingBox: 0 0 434.5201 251.6901
%%CropBox: 0 0 434.5201 251.6901
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 949 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2018-08-27T22:11:07+08:00"
   xmp:CreatorTool="Microsoft® Visio® 2016"
   xmp:ModifyDate="2018-08-27T22:11:07+08:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2016">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Microsoft</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -251.69 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 251.69 li
434.52 251.69 li
434.52 0 li
cp
clp
gsave
-.911026 251.7 mo
435.089 251.7 li
435.089 -.299975 li
-.911026 -.299975 li
-.911026 251.7 li
clp
6.78999 52.14 mo
6.78999 55.28 22.019 57.81 40.809 57.81 cv
59.589 57.81 74.819 55.28 74.819 52.14 cv
74.819 6.79004 li
6.78999 6.79004 li
6.78999 52.14 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
6.78999 52.14 mo
6.78999 55.28 22.019 57.81 40.809 57.81 cv
59.589 57.81 74.819 55.28 74.819 52.14 cv
74.819 6.79004 li
6.78999 6.79004 li
6.78999 52.14 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
6.78999 6.79004 mo
6.78999 3.66003 22.019 1.12 40.809 1.12 cv
59.589 1.12 74.819 3.66003 74.819 6.79004 cv
74.819 9.91998 59.589 12.46 40.809 12.46 cv
22.019 12.46 6.78999 9.91998 6.78999 6.79004 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
6.78999 6.79004 mo
6.78999 3.66003 22.019 1.12 40.809 1.12 cv
59.589 1.12 74.819 3.66003 74.819 6.79004 cv
74.819 9.91998 59.589 12.46 40.809 12.46 cv
22.019 12.46 6.78999 9.91998 6.78999 6.79004 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: KTKXGD+SimSun-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (KTKXGD+SimSun-GBK-EUC-H)
%%Title: (KTKXGD+SimSun-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /KTKXGD+SimSun-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-8 -141 1000 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28793 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 3 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
11096 <001C60D8A8C9B5EE310352EECF602406C0329E1B650528DB4C10B129B
B86AB3C12935CB6FB7137A27A4BA4BEB46A65DAD78F0FC83B360EEE112A0140E
5C390E0E8EA3F7C92786B3B9AEC46703437C6A2C28887BC820512583CC7836E1
6D9ED939B7910787CC00FECD1FAB2728E0DD9BB16E5A032E9D9C282EE7E5018D
8A717D033E0D418BFBCD53BB45AE5E336455171952814514E50B44AA1AEE4E2B
A7EABEE344264E734E0036C35C14833C943CA22B41707903D5915EBE3D492EC> |
6247 <001C60D8A8C9B5EE310366CF9D3A5DBD83A75670FEE48A3F8FEFF4D8BA
34E9FDA01926F70F3C27368833BB6124C03AFEF6B0B6B243C8B82F88BF1348BE
9B645803E8FE9207FE2DFE1BAA4A373F38CC5F048E6E2D864D9DF9766EDA153B
1AC74BBF354409B3D8FAB31BD60AB5561805E76920AB986708824BA1E9B74032
99C77825A60D3D8271450A804C6E50> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /KTKXGD+SimSun-GBK-EUC-H-Identity-H /Identity-H 0 [/KTKXGD+SimSun-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.775 0 0 -9.775 0 0 ]msf
13.414 26.65 mo
(+X\030g)
[9.74994 0 ]xsh
%ADOBeginSubsetFont: KTKXGE+SimSun-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (KTKXGE+SimSun-GBK-EUC-H)
%%Title: (KTKXGE+SimSun-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /KTKXGE+SimSun-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-8 -141 1000 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28793 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
16 <001C60D8A8C9B7A73DB6DF1C647A79F74FB5FAC3D2DC46> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /KTKXGE+SimSun-GBK-EUC-H-Identity-H /Identity-H 0 [/KTKXGE+SimSun-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/KTKXGE+SimSun-GBK-EUC-H-Identity-H findfont [9.775 0 0 -9.775 0 0 ]msf
33.439 26.65 mo
(\000\020)sh
%ADOBeginSubsetFont: KTKXGD+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/KTKXGD+SimSun-GBK-EUC-H 3 GetGlyphDirectory
7485 <001C60D8A8C9B5EE310DF446890551B8A55EE0D01E1DDC86587727E86A
B10939C4C7571186C2973FFB7A509678F72CB102B837E9010ABE27D388AA7214
E677A92193E7D98E3C2586AB03485A2FBE5F6FB3D6AE0A17F1C5C86741A6C1A8
F151817ECC4B7F2BDA7676A7F53C54568BB46BAB7FA9DACA4914AD6EC8EB9F6E
89E62F0EEF36044CE6D770D77E50AD406FE0DE6F9F7E5134B9D7D29569A28ABF
052B931564F3BE88297136FCA7FD9280258A25B4813DE7590A6D816A7437C6CF
73FFBB949AA0D9F9A0C8044B8A9FE9E45F4751FD6166DA583D839007911D2AAE
87587CC81E8BC0D4F858B97C92F2946B15095A10D5C0187D2738DE48FA253A01
FB77C6FEDC73B2DD7CE2F4276599AE189BC4A9188D81B1F8CEEBFE4053ECD826
2720742EAE8B51210EDA13F1BB88A5CA25D120B337282FC28650AA57D086E0E2
C5C08E> |
2257 <001C60D8A8C9B5EE310D99A674619721128A7DC3BC873CD801155D2CF9
900609A8A1FE3CE1619D94F55D4AFE3F82880E1D8B8B639630EE042D5D54435F
BA5B897ED0987C24EAC72E16F5C2CADC364D5D40A0D4443526816EFD580F58AB
9F9D7F97533B57680CCC380C482CAFC511DFBF6C023B1EE0A76E22458507A0C5
FE9A32C6E9A2F4DD354C305D4CCB9876AC2A786DACEED1EBCED6B0339DCD3786
DE7C0228CEC0740CC2D34D092DB0FF635A25674196DB329AA08422AFA0427369
C142EE26269CACB22B452D071B66102008826001D05ECBA713F2C205878B8D23
C44751029FB0C9B0980672FD0F601738528E466C4FB0C8B0B16F0FDB16EDE3F7
6DF9A951091C699EB76C852AC7B2C681242B6A35949B65C0BDB12C81400F3990
62EBD1DB6C6D1A814CE4FC61DF337A3570> |
1236 <001C60D8A8C9B5EE310249C3BE3A1B02B4292762B7D42D16F59C80F293
DA6BA88357D47F1F5F01BDB97433EA3C12D8A81C4DEED0B0C10DA1102E204747
A178877F28C7F4214A399F0AA3C9D0E8DAA2CD23A573AC6866DA858F62A10AD5
05928FCAE691AE84B399ABD9D4BF305B991DF82714FA54DC081CEF22F9D454F2
2CFA24C6BA31E144FE8CBE56C015A08C823321B6D9A8F56638C999D79F2EA6BB
F9D13883257698287D997E72500438248515B2E5018734C86194B4801CBD65B5
1604761F0653914C0050D79FDA449BB497060B01EEE8A53EF347BAC2A56362CA
AC7BD6532CFB9AB6759D7613A504509330B359648D75D016EA0FAFB172F107ED
EFE81AE3C96038B5307E59B3> |
!
end
end end
%ADOEndSubsetFont
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.775 0 0 -9.775 0 0 ]msf
38.439 26.65 mo
(\035=\010\321\004\324)
[9.775 10.469 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: KTKXGD+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/KTKXGD+SimSun-GBK-EUC-H 3 GetGlyphDirectory
1218 <001C60D8A8C9B5EE3103E3FA0B1CD7675A118C8DE9888B05BAF568244C
9DA808F5B89CF82890F38289F81D49DC843077195F9707FC5C3137D6AA05C943
D87478C87C49243278723AABC1ECCA74488AB26A03D77D4F86C2A4B8896C4480
A151985398F5F14216F7D2D72410510D7516B6AB71F74CA68EB917> |
7072 <001C60D8A8C9B5EE31020F8211AF203B409BE69AC0B68B446FD4EE9ED1
4721CF2A9A21B88FDA7D8E37AAC73F35FE4084653B0B95E319EB8703812C2A0C
108D9092AFC18B1940DD2ED6AF36C6F1B98EEE247BC4A963065CFE72FB103B46
B523DBD7E07735C163D7413F2644CC28C6F92F85D0B39EA0D65AF3B4E4B78F55
D6FC49CE4D92F27CEEAC3024668CF3462A4AA4E8573702C758E552BCBE8F0414
EB253C2B7733024541CAE5388922865026D9C7E8A9ACD0C992348DD3F8D4CBC6
0622E7F2161951BFF34079ED8A8E67A25A5F1E11988BE535306FD2CA77DD87D4
D01BE4CA3ECDB0FCD161FE2ECFD9293096DBD24EE4C0F004279A015A08EF5EA4
45F0121066CDD05C304BDE9236870555C977C75D4739DBB42868E680B64AA37B
AE2401958310E87EA4454855BF081799704840DF55FF247D5DC9A48274AB8C60
835B6E7E86EDB425F69F049E974A425D9839A7D556A7244FCF74B36520B3DEC0
C69225DD2EDA65064DE6D781BE0E52E6019E6CD07C93F97A3C40589A375F23EF
61599F097FDD1C00369B8831B391879B210A664175977AE6DF10243B958940CA
DC480B0DCF74760E5300BFB15AA118D97F29E6AFBA54EF39A4F382CE16DE5FC0
7DBA65943CF9E0383993316CFAEC6C9728F1341EE3C4CA8305EF8D7085C3EF7B
9983E5692DB195A932D80484D2890D19> |
6558 <001C60D8A8C9B5EE3102820CDF2059AE7E38A7DD18C49A35420DB1B091
122739BEE0A32333A53DA02BFB714548CF1E0E1DF60B241A30D0E145F324C703
AE6BA40AE7367E8F21EA0F895A1A694E0B1E2B95885487CB92CFDEC1E2ED11BD
F2A7DBB72F5444265C5E8CDEA08DFED3052C81B6BBB72AF4591784C70BE7200D
1AB7ED97BE9C64CF192F912D7354C4FC588801B4F164B79208B016F221435034
0368B5CEF714699166C38AC42E0CCA0FA1C090F3438CA38CFF62B62408B0FC66
1CED7047AA4C28E7CE51EF328B4A242D039B9E86CFF81B0EDB18BD659F822BAB
9AB06551093EE0FE1EFA44BE7E8A9488CA8FC87D41DC769F16898A16C300C034
E8999E3F32045143E4882EF8548B1BC02A3DF2D6FD591734B19E9905316166B0
88D1AE54C0DEDAFC3AE73A2E8B291D796FF1536C4768D97BC0D916F0190CF71C
0C> |
!
end
end end
%ADOEndSubsetFont
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.75 0 0 -9.75 0 0 ]msf
25.914 38.67 mo
(\004\302\033\240\031\236)
[9.75 10.5397 0 ]xsh
103.169 45.41 mo
188.208 45.41 li
188.208 13.52 li
103.169 13.52 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
103.169 45.41 mo
188.208 45.41 li
188.208 13.52 li
103.169 13.52 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: KTKXGD+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/KTKXGD+SimSun-GBK-EUC-H 4 GetGlyphDirectory
16884 <001C60D8A8C9B5EE310D5F637947B51E62AA6C015056A4DB81EBB3E22
8B665B411A0CA29526C1D366C5473839C04538D23F3F7C6C96C9B95352320482
FF641D585DEA157D8A86E686C6F18D31DC361CE69761E6F20B80B47298FE8017
E331DA7ACEF9DDB3349E2AEA4E219971A034CCDD202C300E7FE0958DDDBDE8EC
E3D7A972280274AD247DF2A2A8B56E67B8ACBE3AC61975C3E6A750B0AB691386
1F0EAF192ED3195C5478B5DB47C19A8892BF0B0E7F335400AC2CBE84A7023EF9
7B0D3C9716911039001DCAA9021FFFA9B8C4B1ABE42D08EB9C5685BDF3AA9B3A
7C60F579DD504A823DC1B81C19E7E0E7638EE83D54A2238E0A7BAD9A455A3064
3469A19CCE782FF5E7F9F6B307E5575A350CE0E0EB41D2F555D7316208AAE388
D536EC7C70EA49BD95EA5BD> |
2102 <001C60D8A8C9B5EE310D75AF63B60288AFC61718C33D937C59FD52C538
7DC7497B6D961E924C072228906B490758BCBF3A18F3D1F460C2952208D126FD
7607984F52A10736DF35BE6CCDCF0E6B0A7867C876BACEBFEA20A2FE78DBC64B
288043128B5D9FA3F0126350100122362D646AD98C1E4C95DC85AAB11B3B09D8
508CC69F532BD2AF487FFB2B92CA3E16CCE427D0A912BD976997CEDAABF086D2
937625AF1CB25A9C4AA0804DCCBFCAA101853E4793C3A8CCF272C42D068663FD
F48F464BB179773B0A79515CD4CB2B2A40A193> |
16849 <001C60D8A8C9B5EE310D8981DA82A47F60B59E3C25C801B3478DD22CF
94A62EC8FDE7130E068A431492EA1B281B7BF0E8EF4707FF42C4F7CDFEC00C5C
7774BAC62F9ADCA03868F08E0F9EB85D023EE669E341E4C8F9138A251BAA993A
759643614DEE98AF910751CE52D3AC2D46D07D4D79F7D51351829C431CD74A3B
3315519CF0D192F003103FACBDFE7EAD071321083A40A1070E181C098E908977
FA74D1D3C788F86F2AC43DD3799405425B49BA480F20C642CF669D1DB6725FF3
B84> |
12743 <001C60D8A8C9B5EE3102DB03B5ABD3CD1923494E26F25E48AFC4A8961
7691FA0D291005753A84EE94525734F1F94E51AF8D4C273FE9A856AA082C387B
751362579EBBC7390E3EEEC9BD29FE2A565C40E5EBCA52BD9D507E987F25440E
7E92EB26BD83FA9963CDA9E4861915A1841E2CC024A25682F20FB2A82D86DB41
88D79BED3CD9B5BA6BE11F8658C69FB50B2F9E26A1C2C7E056312F39B9D85AC9
B164E975D88B6749CD3B740A970D1BE882C1E4BB8B49032F8F4058C0F0305A88
969D88E7E59BD4A1D0F29BACB40CEFADCA8E72F578007180DA29516AA2A54E02
0941A494D4B642FAD11F008FEB022DB7F8B1B92DDBF1DCA61291508EC1B6504F
8B863DF89B0FB8BD19143BB20F2BB72BAEC8D1DC3B3AFD6FD59243AEC6AA3B9B
BB05D1A6E4C51061AB278B30E0455E11C19374D7ECE86959BE21CCF416ED797E
AEF30F1E1AD29CDA360D91826BEB7FE01F3005DD1F98003D41BD9FB5FE9329E6
8A84C9698B32B9349AC53E886DC09CF0C63A9B6C8AEBFBEB1F129E26B442ABAF
6E9818763A1C247BF54C2382644F17555AE899B93929592F9A1F2931FCF0001A
790980F4553A7879E2ED4ADB9883BDB64> |
!
end
end end
%ADOEndSubsetFont
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.75 0 0 -9.75 0 0 ]msf
115.919 32.67 mo
(+X\030gA\364\0106A\3211\307)
[9.75 10.5397 9.75 9.78897 10.5105 0 ]xsh
225.059 45.41 mo
310.098 45.41 li
310.098 13.52 li
225.059 13.52 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
225.059 45.41 mo
310.098 45.41 li
310.098 13.52 li
225.059 13.52 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: KTKXGD+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/KTKXGD+SimSun-GBK-EUC-H 3 GetGlyphDirectory
20148 <001C60D8A8C9B5EE310D0EB37440EB625CA7A815695A176AA03D82A1E
1A3093BA34FB076440401ED1FAACE952E19B3273135BB6D12F5FFFF69A73135E
0656DCC7ABBD6E282F61ED9CAE6B1016C068E75BDB1194D072D06801DF8C817D
AD3D0CC0C1DD7BF638BDC1A465C95B1B26A3BA791F60274372454C836C2E49E0
A4F3FABA54D4EF1059584884CA0A78F30639B0AA6F39E70DFF59455D6BD45E18
2EA7AFD4730A6B78DAE12FF2CF8F81DF7771D60AFAF5C87E48A51E0738D8190F
67D5CBF389D83FAD618C145C521A570C8E4A4514D08EAD7A1ED8608379926C0D
FF77EE0EFC1E274B1CA693F86E5D96544F699418DEFA456A417FA731FF66DEBB
2D0795E6F5A0FF376C731449220DF8502C9D95016240A579703095000C3D7864
BBCB2AEB401049E9A1EC4F0D6EC2919D6E668C9315ADB5ACF4A064A9F5888BFA
16BBED01FB6C5F68ABADB8992454BF3BCB9BC933BAB105E5A2CD25AE0793C01D
569262F1EDB7B56ACBD2D43E02B9820F65F7F0406A757BD11CC3F09D795EB2E3
6A7EC> |
9083 <001C60D8A8C9B5EE310DF0717842374B5F376047ED7BB6DFD87B8297A1
811ED0EE66C4FD9674D28A18C43E918CDB7559E798E85BD0C4A9C8F6F9E0FFB9
DD4FFB952B81FD5FD0FB6F9DE54697EA13603357E1ADD3BC2A8666BAAB6BD98D
47B5D704CEF79DCFFEDFB01F639D24799AB86AA49C952EF69042129E85F4089F
27A34D139AF21EA7BBE0462872EE8180337561FAF3C57D9A149BDD53B595424A
BE22EC8E33DD9335D1B9389CB9E33D7DC86F6036DB8E2FF8ED3AAB753FF48ED0
32BD9C3C180584F27186623686F4EF50E967F66779F9AD9AF3AD09ACF8E115DA
56EA09AB2945D391A528692D916C5B9464A7D08A50F3212C75B10EB99454B399
5500D9684DF3FF8B1FD19E0D283B026FDD131E993E365766DF216DAA5B1C0B7F
AEBC51FE0DC3BC4F076244BE8E1C6478EB1AB2F776256F143BB345F6A2C422F0
621F8FA35A0309DE8D73F926CDAE951F2412BD941A5B06411C0DBD1F2DB6DE34
FD4EC6062321C925CFE91343BDDE680DA7015DB4D9AF024B53AB8B262CA967D0
5DC82003C4B6CCE3980223ACCD6D8578F30D96667E5571EF95C62C779EBD687A
BF023F7063D152E1DA606C0FC62A00B4454216BBD6AF5317C1A0C0A28FA549CE
CDBE3D605C> |
8965 <001C60D8A8C9B5EE31023EA3659765CA1CC7573F0D4C67C8BBCC04B503
354EFCA001568A058302C3328FCFA6C8DDF5A809E7C9BE0BA576748098B0D2F4
1A66B7105BDB6FB954E8BC112CCDC52B0474ED12B9C92B84951066F889B7D4D0
2C2151D402A7351CE3C2804DAA23EDD746E2B152E48F5DFFB60BCA03E93FC0DB
14A43AC97E4C9380695142ACB4531DEDF4688CBC651EAFCEDB2ACC32517D3D8B
76A4C11D9320A55382C3E9DADFD85FBB83DE78C0AADD1FFAFAE669401F529F16
7EC85A71F4BA72FAAAD621D112B5620C5A6FD81BD4F4251DAB52D42E12F70224
36E3776B1DA89B16BD0D456219AFABA6C935FF68BF63DB662B16E611226F8C9F
C08CDDD473FB2891F0EA662C191749746430B62012C1593B5AE82DE6475412DE
34D9D741C4D0D74D43A97DB85B7AE3A64F874A3DCF26260F2D1559C290248EA2
8A268CCCEF63303A18BA1940E6B795B9C4FF60398E35C272F57569B39B393667
218D9B68E69FB622AF150765C4CE0E178F73DC8EBC3E5FD252B59F2F89C02EF7
2221B4> |
!
end
end end
%ADOEndSubsetFont
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.75 0 0 -9.75 0 0 ]msf
247.969 32.67 mo
(N\264#{1\307#\005)
[9.75 10.5397 9.75 0 ]xsh
6.78999 103.17 mo
80.491 103.17 li
80.491 77.658 li
6.78999 77.658 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
6.78999 103.17 mo
80.491 103.17 li
80.491 77.658 li
6.78999 77.658 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: KTKXGD+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/KTKXGD+SimSun-GBK-EUC-H 2 GetGlyphDirectory
1663 <001C60D8A8C9B5EE31033B726FD812FF9A0B63B74453F094D7D69D4F8B
28481447CC42992D2F9E9F1BD577B190CDC5477A4BA608BAFBD5F790F43A6EAC
B319E3C5F89E630F0D36AB078C09BE08E4FC1178BF4E4ACA596C48AC4A0CA198
A05150F018A12C1B8276CBE92DEEE8D83E13D356D439FDEB40D1CC1ACFEC2AAC
2F149C9749C6AD25B799C94416D0D1991391E1F83129298272FBF110B742BBE3
2437EB6C3445C632FC0C225AFEDDDA3A12D9B69937BDF09101DD38DE45AE3D3C
CD08D3479C000CA864126DAFB9BC9D47B8088FE538F8E9DD2DF3CBFC6E95A19D
5BB2DDA841F64E992BB823FE9B94A960FCEF9117CE7ACFA7E527AAA281E3DC62
D3D28626DEE91777478D397B2DF17C04A3BED44C6A66AB1CB1C5EC6562DA73CE
0006FFB4F1DC4E9A77E4FDA864F47BC93EA65F7980AB8305C55946570B06FF23
699FB052A1A2EEBB7C13EAA83B2488F1367CABABFD7E90A08548F582E6DF6297
915CC032F35DE2EFD1FBEBCA55F85175> |
5150 <001C60D8A8C9B5EE310DE7BD34221FA93CA8956DE8ACB4CA9B90CF6759
221C9E7C034489FE1446BD6DFEF8AA2F57A58F3292417A45FF11CA7BFE2D45AE
B373BF35628138DD7709D98857E22E54012FB0D633822E245D1F21FBF7EEF1FD
E67F671866E6D86F952FA1B7764A3FF37CC71CE9FBDE2DFE653F21072B2E3F23
59AE07BEBC13326F898B6CD00953F9684FB585C59A2387343117DF96FCA777E0
8B2235C2BDFA2D45DD7EAEE9BCB15C2888D292E3897D88D87E2DF27B6E1FD9E0
13E897112AF6E9F8671A691A067F3AB595D97D9B30A2B44367ADBBA6E4E6903C
743BDFB17AB2A54B4F3CBC9416F4FC85ECA16CC84686C6EB37E856B0BC92CE89
EAC5941B1E92> |
!
end
end end
%ADOEndSubsetFont
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.775 0 0 -9.775 0 0 ]msf
13.739 93.65 mo
(+X\030gA\364\0106\006\177\024\036)
[9.775 10.5179 9.775 9.77499 10.5179 0 ]xsh
267.579 138.6 mo
327.109 110.26 li
267.579 81.91 li
208.049 110.26 li
267.579 138.6 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
267.579 138.6 mo
327.109 110.26 li
267.579 81.91 li
208.049 110.26 li
267.579 138.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: KTKXGD+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/KTKXGD+SimSun-GBK-EUC-H 6 GetGlyphDirectory
7263 <001C60D8A8C9B5EE3103CB5016B82D1F60F99CDBF97F22B053F818C27A
585CBC7A257809D704250A39BDFD15D43F9C2B66A146151CA820A53B626AD5EC
F5CE2EBAAD1EE26CA1CD92E525DBAA7E84A012FA2A273C4CA59086D51D1818C0
B36EB7A9F9F84EF82180CC1886F91714DBD0A447A1C866B4D7F8461A6DA8E1CA
86F234D99053810572D24A7B3F489FFB72787C35FBD0A4CA78556F95967A45CC
B50DCCE20F938BD4A47A8D397BAAC2327536E939E65EB76BC363F2A761EF1E1C
371F2AA45410B796FB2A217F23D7F0D923F2E00D14A324F3B4E9F0ADF63FEB62
F1819649E819B794C3FA7C05A2> |
2646 <001C60D8A8C9B5EE3102F2793977850BF340D4432B7B08E7E51BF94C77
6EAFC195064369B734FB96DD8BE7968E5A0F8D3FB78E2C93E5D8481CE9B1E45A
0AB573743F0A83AD3B5E8C0639E281BDD298E017FD67078F806A7C0D220631FA
F9F0367B0E0A9929E9F472B334DCE8A810635C13730BD27011BA55100C896824
9003B3EFEDA533196B5C477EB208585954104F9A67AFF598A509943599660777
FE11BECC20515FBBCC7DAE599A2F940C221BEA8E0FAA36C6395816DBA07D7191
CE8EF8692320EB6C49DE4810C1638329AB25D8501DA91199F7E2CB72F5663A94
35> |
3927 <001C60D8A8C9B5EE3130B0B5A2C125B9F3BE194A221AA734987A2741F1
7A94D3BD3FAB19F51D8F9226997DF47ED66C8391579241E21FF5E1F71CC22B7C
64688F3CF56413D670177E19A6F868562BF9C1C5AB2ACD8CDE7E8F44B0EE4489
8BF1A4B3E23245B5C2D827E98FFFD00118E51E5977DE36F42DB76899E1F73569
F85D2F43D0F648C5E3> |
1214 <001C60D8A8C9B5EE310DCE8C66EE5F3953CB81797B684D40EE455412CE
487D791C72C4FF96EAC67282DD6C9BBC53754CDB2409E991B825AD72BFA08678
506C6B91FC3007A5DCF0EBC48B9088EE5BC5F0C1D48902EFF59A6BDDCBE5FA25
27216883A3D5FD0B048F09DEEF> |
19512 <001C60D8A8C9B5EE310D81FD49853FC9173DC26D474D00A5209B30634
F7DEEAF394A265682B16C8EA847FC767D78DA29269F38E3B56EA11F19851E61F
854E0E366E4EA2326C87293B14BFE7C19FC8F9AF402057D1D1FDF383D4A67911
0BB0CAEA977C5EFF7CADE69984048FC53B1F5E178634E089509169ACFCE2A855
E2699EB422293EDE65FA75EA657B48A5787611061370E03A527570BDC63505E7
F054BCE31CBB47036F4E41CDA24366D4A6510F61BEE2486DD338E35CB3F78718
D7E3AF63E68A921273F6973164EEBA8D49334B1ED56064B715BD83A1D0FCDB44
E92C02DEA2278BF21ADA3DD31187A5CF092D50CB68620244CDB06B247C4BA97F
8006ADF7A005194C4ADA5749EA93F57EA6003433061497DF385FECB1272FD5C9
961C0157377282EC4EC377F84026A0BA3B737608586FD00924DC3DD1C3CC8C02
0ACB49411B748AD891B374C3E1D1CCF7C41EBF589429A410B0AF63E20E5EFB1B
F862CB3E560B89EE1C4C1F09668A91652C02F85347D23A2FDC66829AFD2FB49F
DFE127219C3451A19E510611501F00EA6B49273786EBF070FFE185A32BAA9620
CBA6A7D4C9A24D73F359658F23B4A591BA2E93F8E5A18BA311616899E7186D26
61EACB24986> |
1644 <001C60D8A8C9B5EE310D8D4A87651AD7F39D005C43703E3C7C8BD7D647
6578F9B4497A8FB2E3C945E18F90E3A8A478A27E7A07888213CAD803089BB83E
ACF9D661663EFA4F93BFA5F282E98A70BD82785C259E10DC54EB8121816FA52A
52C1DBBB18B58F863027F99054CD74D98666F14928189789E6668CD81FE590C4
16501DDE89AAE7C19FDE3394A92D4B229499E7890AAFE3E1113C69FF7ED13CDC
25D92DBE21BF9C338AC0AA639FAE69E8F533B28B417D2C66C10FBB7D5417B1A8
08D72A5BEF52FF17C5639F34CCA6B27B6BD9FD676DA4696B711BE10380B8778A
40B5CF41F1090342EE42C179F50545C78EE1529DDEFB3232456F82> |
!
end
end end
%ADOEndSubsetFont
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.75 0 0 -9.75 0 0 ]msf
217.939 113.53 mo
(N\264#{A\364\0106\034_\012V\017W\004\276L8\006l)
[9.75 10.491 9.75 9.75 10.4911 9.75 9.75 10.491 9.75 0 ]xsh
6.78999 149.94 mo
80.491 149.94 li
80.491 124.428 li
6.78999 124.428 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
6.78999 149.94 mo
80.491 149.94 li
80.491 124.428 li
6.78999 124.428 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: KTKXGD+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/KTKXGD+SimSun-GBK-EUC-H 4 GetGlyphDirectory
1956 <001C60D8A8C9B5EE310D7C04809F96E968760ADCD571EDDEF67578235B
97A210B17DC0A33E5DFBEB8DD5ABA92AAD84AD9B644F4D66094563D0489A4A44
5FAB2EA645C79CDAAF1DE42A340455356D2F111D4B8FF7A522A42E48323B3AFD
B7AE20EFB2F8D1D49A342813304496F4F2C25F0C3BB379EF8ECA9CFA0A27E4CD
5576411ED73C1C61F7ACE1EA6F058F3ED6DA27FCE2F0EA502F08710B804633BF
8FCD50B1D086AC6EDA0A1217811EF0503A1F6A68242F58BFFE544A0CF641BF38
CB0EC1794699BD422869D87A1D45B8F633B20B6FC40354C09CBD99BAE6F59A08
4491A50ADE3BCDBD4B53D5E6E9255C95A4DC3D139D1A09BA072AC6C800BB40D6
7E4B67B4B6009E09F31D0EA73546BE6696CEDF> |
17363 <001C60D8A8C9B5EE310D0AE8886F666B83ED517347699EF9A8D81E360
4910C76A6F8BD0D273F92061B746F0835246F27D4E14B0011D952C7C7C612F89
815F641A3D32960AA229447A20FBE6D32D1E2350C6E660E0C9844F99F8628EEE
9D998A1ED48D75A12260EB307618B401DE20E68ACD172CF2128B214533E5C205
0473A78C617D906AB6430720CA83D2AB660D8D4965D6812CCABB0BCF8E4CA6C7
6BD9BA628585710F692C5A37EF978BA0FF6783A655DD8EEE97F455120EF04318
D0593937063DD3D5CB0A012B539ADE2B183CEE4336FB44760F296F98291BD01A
15CEC7AD2B4B38E3DB0D48A369965B6BBE6609B09F9F1953351CB6130FCBDDAB
E694FC3FCDB0F561C80139C2546371C2E75F50A462A19D6B31789A656807D088
03BC1E1248B753597C94466730977C348A5187DD96B0AF9A9BD68B03356848E9
F35FAADB3D86EA12865CB0BFE9F62A7DC591D2E4020A1EA5BEEC6347CC33D656
BB376A89609E244E4AF2A1A079A866C76AE22C85CC2B8E43B0DDC9F743D01D39
963BAE4D15CB663D6C571A2F4AF6B7601B395E561542301995292266F2952B75
5C8B2DB55CB70> |
5295 <001C60D8A8C9B5EE310D390EFE5D930B935C00CC89F44143EB2C6BA1DB
25B12556D177F17365DE512750EEBA8CEA34D2678A9A83640316EF944A02FC21
F6AD35ECD2E00F9BB3E3A682797C9A92E2D203BF556DB81EBAD1FC498223EDE7
24826FDD9254DC9FD3412129CF9ECA15A99B03520F486B28> |
5334 <001C60D8A8C9B5EE310268CE6DCE9C38579ECC47A3A38310EFF29A4C57
AD423F5177C16D22E63896AFA614414B40A940B046E2D34D08F74D2B0A245830
35CFCA0375AD249C4BB53B3456C0FF12D4D0BAB2FBCC22B9AFB94847922E7DF1
488C43C30DAE76886ABF2B90A3ADE6922EA6A613CB98CA82A252E6B391733F0B
67100C06B654C4EA3CB4B767120F904E489201C6F14556622AD7046FD3AC0B3F
2CF1A139C2C210965687D704EBD70D9F335C04BA9512C716CD2A40BD8F21BD73
244C8F64FB66C2BEB488866E705BD855C5A249B8AEC2E11E9CF340EB3E38A75A
0EC7CB94B19DCF4B2FEA44D1C1BA2CBFF051AA9C7F35D3E6B1A80CFAF93BBD7B
1DE59D5184152641CF739900FBC712664B21BE373728F44D152E01A91903342C
D441463BB1D41FF582FC3C89276FA7C25E442E1E6DA6552287D95A0FA6ED9A43
BBC4865D> |
!
end
end end
%ADOEndSubsetFont
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.75 0 0 -9.75 0 0 ]msf
13.739 140.48 mo
(+X\030g\007\244C\323\024\257\024\326)
[9.75 10.5397 9.75 9.78898 10.5105 0 ]xsh
120.179 123.01 mo
171.203 123.01 li
171.203 97.498 li
120.179 97.498 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
120.179 123.01 mo
171.203 123.01 li
171.203 97.498 li
120.179 97.498 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.75 0 0 -9.75 0 0 ]msf
125.939 113.53 mo
(L8\006lA\3211\307)
[9.75 10.491 9.75 0 ]xsh
355.449 123.01 mo
429.15 123.01 li
429.15 97.498 li
355.449 97.498 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
355.449 123.01 mo
429.15 123.01 li
429.15 97.498 li
355.449 97.498 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: KTKXGD+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/KTKXGD+SimSun-GBK-EUC-H 4 GetGlyphDirectory
7735 <001C60D8A8C9B5EE31038D5D1282FB89803D01EA0109A01FEB500F7E92
15FB8D7E20CE1C959D209D09780CE440D3CD5D28C7FC6A03CD633276CAA4EE69
780D48FBF33C70461696E301014D793120234967A8D7769FD5F9B4C644B3F95E
BB4D1C9C4A3A41029E0D7EFE68B3D4A1708B2708068F97EB3B7FE5DD39FEBFEF
BC0B0FF4ABE3869D7957D6C7614F50F5CFBFD866A740D7D578ED97370347A17B
1DBBBC8E6DDE794DF832E0D472CF6F122C414CADF213C6886C29E3433655F4EA
C8A95141CF248BFDC14F288C9DCA78BD1864C149FB4612DA95A0FF2209D09502
F4D562236073D413579591DCE16B3F745079287B6845B4EA9F4C2734A0B3672C
76A9846C9ED1E04C8801D93897D4F64D5A9BF44B292DDFE0B0849FDB1486970D
306EA80305ACD0B12D70DFF52619> |
2038 <001C60D8A8C9B5EE31025097A27CE0E60A06A0A37B0D22DE25A9FC07B1
DB7860570CDA44CAD20BE03FE8C4679B48481400B9EE168E289344662AD9B935
FDEB6F52CCD6E08FC9F095287B53AF84310B34158393375BB15B3933668D823A
3C887E21F7E5B877C99BDDD7BBF6CDE901E2653482D3317096C790A79C721310
6222B7B73AB88E7F1031DAC1D92E665066E8A076F3B1A5823ED9E8643B1CA382
6FE157E92D066A5AA01515B92B38E1151D031D34C42190CB5B3F776B9F7B3FEA
D56A4819C7A00A431605446CEB18BACFA15144BE4DAAF6440D7445055A2180EA
6A67DE3D5BFDC6BA438C00577C864CD414B09E7EBDE056B0AACACDB2062D5976
2EB35730796CE7A949F7161145EFB154872A25578256D85FEBB03B113DFC8DD7
037434FA0D8FB9A73914E8E6E0C38442053C8C43ACD0CE0EDB21C5CAC3DEF6EB
6FBFD5E3735EF56F6BC96712B689D8C35A7CA3D1D9414140> |
6594 <001C60D8A8C9B5EE3102EF598A56B8DF53EEB30E1098CC684D67997E4C
AD95E7CBEFAF5DB63F2D0587B78B708FEEF6302A6DDF674ADF800756C62837D1
0F043368E5DE775AEB802D7384D0808BD0F212084719A2A58A0C5FE7318F7CF7
DEC6B1702C621008B138C8DCD9D8A29D2623A2A507D87C2B8508BC39F0874B17
76DE7CB67EE938D9503A6D48C8EAD9065E4E637633DA8162E64EF5A5F28E9822
E0430968E1993EC40D7815C766DC1E79BEBFEC294B98F3DE77384E60EA1E8519
54DE33F5A8E1FCD81CC92A38BB2EDDF4D0C1255C4B8D2A107F8AA9ED54EBD3BB
FADF4ED747C18960ACB8A2A51B613B67BD6E4929C36C80729C8F22BF1F0C14C0
4DD26CDC46D3ADF6> |
2621 <001C60D8A8C9B5EE31035A7D8EDC2FAF3679160BA62BC22AA1F25328C8
AAB9E82780D1807C82E7F68DBB8348D336E863714C6CB65368B16A322C0EE03E
9CE8997CC4410AE5743874DACD6D87028716E7CFEC02596AD670F1C4BACACAFF
9F79B364EA0C8CD570D054C6897CC1F0CE6D43E39EB482A810B9122C0A730B40
A66664DD536B0B8622669B9BDC10DA51E9BD69DBCFBABB3E242A200AB73C8C83
C3DF98064F02BECAD7B87DF641CD07EA5C6AA317EDCC827E74F5AA2E4986EF12
31C3852AF8FF9F8912AE99E3A0EFF9E3A9F504C438453450C135B86BAA> |
!
end
end end
%ADOEndSubsetFont
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.75 0 0 -9.75 0 0 ]msf
372.839 113.53 mo
(\0367\007\366\031\302\012=)
[9.75 10.5397 9.75 0 ]xsh
225.059 188.21 mo
310.098 188.21 li
310.098 156.32 li
225.059 156.32 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
225.059 188.21 mo
310.098 188.21 li
310.098 156.32 li
225.059 156.32 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: KTKXGD+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/KTKXGD+SimSun-GBK-EUC-H 3 GetGlyphDirectory
2655 <001C60D8A8C9B5EE310314E146674EB7001DDF8FE142437E94210DDA67
5478A06CD9B2E86D8A93B745262723D0B42C41822A8E20935683938CBA83338B
908BF3BD6B316A3657065031EF1FA80A7DF16B8D09E5799784DB66F35D3B2B40
DC820CEC225A5455FCBB4E613B5868D0AB42218EA2BC0F524F303B45692C7769
60B1410FD33BB4D32829C28DF5FF62A2C3CB1F404E41C39DB2FD502D295D86C3
8CA0F7288D2E5FD7387981DE24D88CB3FAC9BA52AE9B02577A0374C9ABD793BF
30699178E7D482A8D9469CFBDCB8C824ED419F205E20B15A7B2CE3E6D4E30924> |
2561 <001C60D8A8C9B5EE310D5F6264DDAC9A7D49E014BEF9C6116FF61A4840
31C856B1BD0204D462DD6FD66A4101C9245C17A13113C7612640C36F4CE73446
A819D7F4C108F1CD0E733243FEAAD9D4820BEBEA4E3FEDCD4901DCC3904D3DD7
B4CC02350606B23B2106E8CE9A8222D64302FF9A4EC43E4F3AE7E1B5120A20A6
F410DB659EECA91567403DB7D0CB06BFA86CE7975498608CF4295B9DC34CAFB1
742270156CB9BB1BAEB05623172A2513EF47025D4DD9C402BF5A9F0719B2C68F
CE3EF6764697A11F8EB6B09E12896DB2831D92947C9DE923DF56380B7787C48B
CBD731E809994312A00924026E5F6465D21171DC287BAAA9AA9EDD58B99EE3F4
38E96A3FA32635BDD6309FF887A45D120DF41493560E17> |
5439 <001C60D8A8C9B5EE310DE3F256B236D7C6DE7317F66DA911DCD3686CCB
475D9BCA2484AD98BD874BDB8E0FEFD14851791556AFF9D3093337DF9C1BF2C6
CE2F6B320336793DFD86B336C0D20EC8627D042813D373824BE707181002601D
7DCDE0154FD68EB1E62F6F26A7B02C98EBB9F1FC77C42D948674E39BF8E86C6A
2BA9F80DB24482EC0529A5BBEBCB67D5E9852ECE32070876099909F8E3C76480
0283E28AB0F615CC8A9FE0A0F5ACDFE6855F6FD8B86B4285353DBEC121B7B0EF
87AA4DA0993EFCA661A4CB5A1CE193372D7F00BDF4FA48588E44AAC9E497FC31
872A789E69EB473C86F23E23DEA44CF8B3BA8E360DBF3A5E71F8EA6A1B67953E
E4E4> |
!
end
end end
%ADOEndSubsetFont
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.775 0 0 -9.775 0 0 ]msf
242.969 175.57 mo
(\012_\012\001\025?\031\302\012=)
[9.77499 10.469 9.77499 9.72607 0 ]xsh
.75 lw
74.819 29.47 mo
94.179 29.47 li
@
93.359 26.2 mo
103.169 29.47 li
93.359 32.74 li
93.359 26.2 li
cp
ef
188.209 29.47 mo
216.069 29.47 li
@
215.249 26.2 mo
225.059 29.47 li
215.249 32.74 li
215.249 26.2 li
cp
ef
267.954 45.41 mo
267.954 72.92 li
267.954 73.1271 267.786 73.295 267.579 73.295 cv
267.372 73.295 267.204 73.1271 267.204 72.92 cv
267.204 45.41 li
267.204 45.2029 267.372 45.035 267.579 45.035 cv
267.786 45.035 267.954 45.2029 267.954 45.41 cv
f
270.849 72.1 mo
267.579 81.91 li
264.309 72.1 li
270.849 72.1 li
ef
267.579 138.6 mo
267.579 147.33 li
@
270.849 146.51 mo
267.579 156.32 li
264.309 146.51 li
270.849 146.51 li
cp
ef
327.109 110.26 mo
346.459 110.26 li
@
345.639 106.99 mo
355.449 110.26 li
345.639 113.53 li
345.639 106.99 li
cp
ef
80.489 90.41 mo
91.119 90.41 li
91.119 110.26 li
111.179 110.26 li
@
110.369 106.99 mo
120.179 110.26 li
110.369 113.53 li
110.369 106.99 li
cp
ef
80.489 137.18 mo
91.119 137.18 li
91.119 110.26 li
@
171.199 110.26 mo
199.059 110.26 li
@
198.239 106.99 mo
208.049 110.26 li
198.239 113.53 li
198.239 106.99 li
cp
ef
225.059 244.9 mo
310.098 244.9 li
310.098 213.01 li
225.059 213.01 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
225.059 244.9 mo
310.098 244.9 li
310.098 213.01 li
225.059 213.01 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: KTKXGD+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/KTKXGD+SimSun-GBK-EUC-H 4 GetGlyphDirectory
6616 <001C60D8A8C9B5EE3102A5251ABF09284251A32B05135DDC27B52D39AB
6A393D8F4569C3F19B085A0E9C7E67A23D6037E68819EF3D58108D06ACF2ECF5
3ECEAABFFDF6A2C24F4FBF1865ED26F5D1981D20A51B1ED327E7A2360FB09290
7E7BBF22A83A32E6BF45B0D0A0928E8AE9C0103A1DE68FE96E935AE46A14CAD3
E31A771BD65D00434E9E9BF158E155728E9A3B2BF0CA26C4EB42BC6EC8252C3D
D32193D877FE8ED849E1A3413424398950517355340B088B7DDC63D770C47857
7AFE31CE5852CF89A9056ADC30861CC22007B77C2003023BE91449BDFD6F054B
374316B44708EB213E2654FA013A8ABE24C46CC6FFCDE1F6F1A718EE16BBC047
3FEDF0F92C8DC4298FD089A15AFC764A1D7E54D19A95D07C1ED89BBA69350273
11BE159FDA139DDC8BF97DBD5D5F835C2EC6D5BE2FCC7FB222DB8307926988BA> |
14720 <001C60D8A8C9B5EE310277AAF2E419D9AFA522D3ED3B6A762044495BC
E08B68FD447C4B10485048C3ED4EA716157EA3388FD1A54FB16A28B3E5681E32
60EABB29CFB04AB70C9481583AE20919A39D7DE71C70080392C273F4D3297618
90A622103CC44D02D6BD6A4486886AC424D9F27998B8D37F0120BE39DF772000
81DB98434D06B327C761D1B595B65EF140AB15E1C5D2B5240861E9B48796D286
2EC471A183A0547AF38B7E6D78B5496FDC7EBDF203325A812CCC9DCA370BF1F4
6D4B51C8490F39F0B384678AE487A92BFF94F5F0D472DAEE66916CE7E571A2CD
DDEC936D5336820CB6852A646846EEC6410891853DCADC826D99FF6D5121AC94
15DED9F2AEF74A83DBD125BB9D39156CA47C4E4561924DC1FF6B5E488D20BACC
E97B97816AB87A07A3264D596F9B3539287739119EE71D16CD2EE4ECF4321BD6
2EA8491392F48AD29> |
2119 <001C60D8A8C9B5EE310D0265CD21D6C39EE05E33D7037A6AE93BDBD91B
D87EAF7651B77178FA3F680ADB4EEA485AFD4E61249D0F1B3182677448000BA2
5D4A9B9D30605706AA7EC85822931A3CE8DE4A791BD0BCF72D501FCEC3A8E74E
A908B7094B0448A9D5133A3D75813B84E4F5E7B8913AF368FB4A04F9E9B2AE6C
E560903FD767D5652FCC8F4AFD593DD5DBBCCFA8A281BE387CBDECB430EAE6E0
C851592130C423554EAC4D300B77FEE3B7991FBD7E9EA63CD5E71E36662E71C3
807D417FE91EA54795334450AAEB160AB128097EC46B8656413F4C1309613B5D
718DCA18DEF9EF170F449F11EFF247BCC7D6EAE0501F09D33EACE368> |
16024 <001C60D8A8C9B5EE310DF448FC15D5F557D699BB8A9C03AD99EB07BF1
E2267205C78510C0E37AC9BBC483DC36BF15A0888B7BE76B6C1762B62B30BDD0
985CB56C244FDC198860AD3912F9B50A5AE80B265D252E3E808E0DAE7A227DFB
82B25FF72F03A5FAC4B74CC5FA1EB12843DC41E3209C5CADE000E393BE96F0B0
6ADFD32D5674969509506EDB9F677FF4F4FC727C760E14C418D6DFC91271AE20
E7F4FD0EC3161F669ABC89BCE5A070709A3EC3421C778A9218B4FDDB7DF90154
FC5709A9A995F452FC1B445B563936DE44CF203D1FFB00A4181CF63AEA314A0E
996ADB8EA301AEC75317CDECE7BB432B5FEE4131F0F18A0A494418671> |
!
end
end end
%ADOEndSubsetFont
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.75 0 0 -9.75 0 0 ]msf
247.969 232.32 mo
(\031\3309\200\010G>\230)
[9.75 10.5397 9.75 0 ]xsh
433.119 250.69 mo
432.999 250.57 li
433.119 250.45 li
433.239 250.57 li
433.119 250.69 li
431.919 250.69 mo
431.799 250.57 li
431.919 250.45 li
432.039 250.57 li
431.919 250.69 li
430.719 250.69 mo
430.599 250.57 li
430.719 250.45 li
430.839 250.57 li
430.719 250.69 li
429.519 250.69 mo
429.399 250.57 li
429.519 250.45 li
429.639 250.57 li
429.519 250.69 li
428.319 250.69 mo
428.199 250.57 li
428.319 250.45 li
428.439 250.57 li
428.319 250.69 li
427.119 250.69 mo
426.999 250.57 li
427.119 250.45 li
427.239 250.57 li
427.119 250.69 li
425.919 250.69 mo
425.799 250.57 li
425.919 250.45 li
426.039 250.57 li
425.919 250.69 li
424.719 250.69 mo
424.599 250.57 li
424.719 250.45 li
424.839 250.57 li
424.719 250.69 li
423.519 250.69 mo
423.399 250.57 li
423.519 250.45 li
423.639 250.57 li
423.519 250.69 li
422.319 250.69 mo
422.199 250.57 li
422.319 250.45 li
422.439 250.57 li
422.319 250.69 li
421.119 250.69 mo
420.999 250.57 li
421.119 250.45 li
421.239 250.57 li
421.119 250.69 li
419.919 250.69 mo
419.799 250.57 li
419.919 250.45 li
420.039 250.57 li
419.919 250.69 li
418.719 250.69 mo
418.599 250.57 li
418.719 250.45 li
418.839 250.57 li
418.719 250.69 li
417.519 250.69 mo
417.399 250.57 li
417.519 250.45 li
417.639 250.57 li
417.519 250.69 li
416.319 250.69 mo
416.199 250.57 li
416.319 250.45 li
416.439 250.57 li
416.319 250.69 li
415.119 250.69 mo
414.999 250.57 li
415.119 250.45 li
415.239 250.57 li
415.119 250.69 li
413.919 250.69 mo
413.799 250.57 li
413.919 250.45 li
414.039 250.57 li
413.919 250.69 li
412.719 250.69 mo
412.599 250.57 li
412.719 250.45 li
412.839 250.57 li
412.719 250.69 li
411.519 250.69 mo
411.399 250.57 li
411.519 250.45 li
411.639 250.57 li
411.519 250.69 li
410.319 250.69 mo
410.199 250.57 li
410.319 250.45 li
410.439 250.57 li
410.319 250.69 li
409.119 250.69 mo
408.999 250.57 li
409.119 250.45 li
409.239 250.57 li
409.119 250.69 li
407.919 250.69 mo
407.799 250.57 li
407.919 250.45 li
408.039 250.57 li
407.919 250.69 li
406.719 250.69 mo
406.599 250.57 li
406.719 250.45 li
406.839 250.57 li
406.719 250.69 li
405.519 250.69 mo
405.399 250.57 li
405.519 250.45 li
405.639 250.57 li
405.519 250.69 li
404.319 250.69 mo
404.199 250.57 li
404.319 250.45 li
404.439 250.57 li
404.319 250.69 li
403.119 250.69 mo
402.999 250.57 li
403.119 250.45 li
403.239 250.57 li
403.119 250.69 li
401.919 250.69 mo
401.799 250.57 li
401.919 250.45 li
402.039 250.57 li
401.919 250.69 li
400.719 250.69 mo
400.599 250.57 li
400.719 250.45 li
400.839 250.57 li
400.719 250.69 li
399.519 250.69 mo
399.399 250.57 li
399.519 250.45 li
399.639 250.57 li
399.519 250.69 li
398.319 250.69 mo
398.199 250.57 li
398.319 250.45 li
398.439 250.57 li
398.319 250.69 li
397.119 250.69 mo
396.999 250.57 li
397.119 250.45 li
397.239 250.57 li
397.119 250.69 li
395.919 250.69 mo
395.799 250.57 li
395.919 250.45 li
396.039 250.57 li
395.919 250.69 li
394.719 250.69 mo
394.599 250.57 li
394.719 250.45 li
394.839 250.57 li
394.719 250.69 li
393.519 250.69 mo
393.399 250.57 li
393.519 250.45 li
393.639 250.57 li
393.519 250.69 li
392.319 250.69 mo
392.199 250.57 li
392.319 250.45 li
392.439 250.57 li
392.319 250.69 li
391.119 250.69 mo
390.999 250.57 li
391.119 250.45 li
391.239 250.57 li
391.119 250.69 li
389.919 250.69 mo
389.799 250.57 li
389.919 250.45 li
390.039 250.57 li
389.919 250.69 li
388.719 250.69 mo
388.599 250.57 li
388.719 250.45 li
388.839 250.57 li
388.719 250.69 li
387.519 250.69 mo
387.399 250.57 li
387.519 250.45 li
387.639 250.57 li
387.519 250.69 li
386.319 250.69 mo
386.199 250.57 li
386.319 250.45 li
386.439 250.57 li
386.319 250.69 li
385.119 250.69 mo
384.999 250.57 li
385.119 250.45 li
385.239 250.57 li
385.119 250.69 li
383.919 250.69 mo
383.799 250.57 li
383.919 250.45 li
384.039 250.57 li
383.919 250.69 li
382.719 250.69 mo
382.599 250.57 li
382.719 250.45 li
382.839 250.57 li
382.719 250.69 li
381.519 250.69 mo
381.399 250.57 li
381.519 250.45 li
381.639 250.57 li
381.519 250.69 li
380.319 250.69 mo
380.199 250.57 li
380.319 250.45 li
380.439 250.57 li
380.319 250.69 li
379.119 250.69 mo
378.999 250.57 li
379.119 250.45 li
379.239 250.57 li
379.119 250.69 li
377.919 250.69 mo
377.799 250.57 li
377.919 250.45 li
378.039 250.57 li
377.919 250.69 li
376.719 250.69 mo
376.599 250.57 li
376.719 250.45 li
376.839 250.57 li
376.719 250.69 li
375.519 250.69 mo
375.399 250.57 li
375.519 250.45 li
375.639 250.57 li
375.519 250.69 li
374.319 250.69 mo
374.199 250.57 li
374.319 250.45 li
374.439 250.57 li
374.319 250.69 li
373.119 250.69 mo
372.999 250.57 li
373.119 250.45 li
373.239 250.57 li
373.119 250.69 li
371.919 250.69 mo
371.799 250.57 li
371.919 250.45 li
372.039 250.57 li
371.919 250.69 li
370.719 250.69 mo
370.599 250.57 li
370.719 250.45 li
370.839 250.57 li
370.719 250.69 li
369.519 250.69 mo
369.399 250.57 li
369.519 250.45 li
369.639 250.57 li
369.519 250.69 li
368.319 250.69 mo
368.199 250.57 li
368.319 250.45 li
368.439 250.57 li
368.319 250.69 li
367.119 250.69 mo
366.999 250.57 li
367.119 250.45 li
367.239 250.57 li
367.119 250.69 li
365.919 250.69 mo
365.799 250.57 li
365.919 250.45 li
366.039 250.57 li
365.919 250.69 li
364.719 250.69 mo
364.599 250.57 li
364.719 250.45 li
364.839 250.57 li
364.719 250.69 li
363.519 250.69 mo
363.399 250.57 li
363.519 250.45 li
363.639 250.57 li
363.519 250.69 li
362.319 250.69 mo
362.199 250.57 li
362.319 250.45 li
362.439 250.57 li
362.319 250.69 li
361.119 250.69 mo
360.999 250.57 li
361.119 250.45 li
361.239 250.57 li
361.119 250.69 li
359.919 250.69 mo
359.799 250.57 li
359.919 250.45 li
360.039 250.57 li
359.919 250.69 li
358.719 250.69 mo
358.599 250.57 li
358.719 250.45 li
358.839 250.57 li
358.719 250.69 li
357.519 250.69 mo
357.399 250.57 li
357.519 250.45 li
357.639 250.57 li
357.519 250.69 li
356.319 250.69 mo
356.199 250.57 li
356.319 250.45 li
356.439 250.57 li
356.319 250.69 li
355.119 250.69 mo
354.999 250.57 li
355.119 250.45 li
355.239 250.57 li
355.119 250.69 li
353.919 250.69 mo
353.799 250.57 li
353.919 250.45 li
354.039 250.57 li
353.919 250.69 li
352.719 250.69 mo
352.599 250.57 li
352.719 250.45 li
352.839 250.57 li
352.719 250.69 li
351.519 250.69 mo
351.399 250.57 li
351.519 250.45 li
351.639 250.57 li
351.519 250.69 li
350.319 250.69 mo
350.199 250.57 li
350.319 250.45 li
350.439 250.57 li
350.319 250.69 li
349.119 250.69 mo
348.999 250.57 li
349.119 250.45 li
349.239 250.57 li
349.119 250.69 li
347.919 250.69 mo
347.799 250.57 li
347.919 250.45 li
348.039 250.57 li
347.919 250.69 li
346.719 250.69 mo
346.599 250.57 li
346.719 250.45 li
346.839 250.57 li
346.719 250.69 li
345.519 250.69 mo
345.399 250.57 li
345.519 250.45 li
345.639 250.57 li
345.519 250.69 li
344.319 250.69 mo
344.199 250.57 li
344.319 250.45 li
344.439 250.57 li
344.319 250.69 li
343.119 250.69 mo
342.999 250.57 li
343.119 250.45 li
343.239 250.57 li
343.119 250.69 li
341.919 250.69 mo
341.799 250.57 li
341.919 250.45 li
342.039 250.57 li
341.919 250.69 li
340.719 250.69 mo
340.599 250.57 li
340.719 250.45 li
340.839 250.57 li
340.719 250.69 li
339.519 250.69 mo
339.399 250.57 li
339.519 250.45 li
339.639 250.57 li
339.519 250.69 li
338.319 250.69 mo
338.199 250.57 li
338.319 250.45 li
338.439 250.57 li
338.319 250.69 li
337.119 250.69 mo
336.999 250.57 li
337.119 250.45 li
337.239 250.57 li
337.119 250.69 li
335.919 250.69 mo
335.799 250.57 li
335.919 250.45 li
336.039 250.57 li
335.919 250.69 li
334.719 250.69 mo
334.599 250.57 li
334.719 250.45 li
334.839 250.57 li
334.719 250.69 li
333.519 250.69 mo
333.399 250.57 li
333.519 250.45 li
333.639 250.57 li
333.519 250.69 li
332.319 250.69 mo
332.199 250.57 li
332.319 250.45 li
332.439 250.57 li
332.319 250.69 li
331.119 250.69 mo
330.999 250.57 li
331.119 250.45 li
331.239 250.57 li
331.119 250.69 li
329.919 250.69 mo
329.799 250.57 li
329.919 250.45 li
330.039 250.57 li
329.919 250.69 li
328.719 250.69 mo
328.599 250.57 li
328.719 250.45 li
328.839 250.57 li
328.719 250.69 li
327.519 250.69 mo
327.399 250.57 li
327.519 250.45 li
327.639 250.57 li
327.519 250.69 li
326.319 250.69 mo
326.199 250.57 li
326.319 250.45 li
326.439 250.57 li
326.319 250.69 li
325.119 250.69 mo
324.999 250.57 li
325.119 250.45 li
325.239 250.57 li
325.119 250.69 li
323.919 250.69 mo
323.799 250.57 li
323.919 250.45 li
324.039 250.57 li
323.919 250.69 li
322.719 250.69 mo
322.599 250.57 li
322.719 250.45 li
322.839 250.57 li
322.719 250.69 li
321.519 250.69 mo
321.399 250.57 li
321.519 250.45 li
321.639 250.57 li
321.519 250.69 li
320.319 250.69 mo
320.199 250.57 li
320.319 250.45 li
320.439 250.57 li
320.319 250.69 li
319.119 250.69 mo
318.999 250.57 li
319.119 250.45 li
319.239 250.57 li
319.119 250.69 li
317.919 250.69 mo
317.799 250.57 li
317.919 250.45 li
318.039 250.57 li
317.919 250.69 li
316.719 250.69 mo
316.599 250.57 li
316.719 250.45 li
316.839 250.57 li
316.719 250.69 li
315.519 250.69 mo
315.399 250.57 li
315.519 250.45 li
315.639 250.57 li
315.519 250.69 li
314.319 250.69 mo
314.199 250.57 li
314.319 250.45 li
314.439 250.57 li
314.319 250.69 li
313.119 250.69 mo
312.999 250.57 li
313.119 250.45 li
313.239 250.57 li
313.119 250.69 li
311.919 250.69 mo
311.799 250.57 li
311.919 250.45 li
312.039 250.57 li
311.919 250.69 li
310.719 250.69 mo
310.599 250.57 li
310.719 250.45 li
310.839 250.57 li
310.719 250.69 li
309.519 250.69 mo
309.399 250.57 li
309.519 250.45 li
309.639 250.57 li
309.519 250.69 li
308.319 250.69 mo
308.199 250.57 li
308.319 250.45 li
308.439 250.57 li
308.319 250.69 li
307.119 250.69 mo
306.999 250.57 li
307.119 250.45 li
307.239 250.57 li
307.119 250.69 li
305.919 250.69 mo
305.799 250.57 li
305.919 250.45 li
306.039 250.57 li
305.919 250.69 li
304.719 250.69 mo
304.599 250.57 li
304.719 250.45 li
304.839 250.57 li
304.719 250.69 li
303.519 250.69 mo
303.399 250.57 li
303.519 250.45 li
303.639 250.57 li
303.519 250.69 li
302.319 250.69 mo
302.199 250.57 li
302.319 250.45 li
302.439 250.57 li
302.319 250.69 li
301.119 250.69 mo
300.999 250.57 li
301.119 250.45 li
301.239 250.57 li
301.119 250.69 li
299.919 250.69 mo
299.799 250.57 li
299.919 250.45 li
300.039 250.57 li
299.919 250.69 li
298.719 250.69 mo
298.599 250.57 li
298.719 250.45 li
298.839 250.57 li
298.719 250.69 li
297.519 250.69 mo
297.399 250.57 li
297.519 250.45 li
297.639 250.57 li
297.519 250.69 li
296.319 250.69 mo
296.199 250.57 li
296.319 250.45 li
296.439 250.57 li
296.319 250.69 li
295.119 250.69 mo
294.999 250.57 li
295.119 250.45 li
295.239 250.57 li
295.119 250.69 li
293.919 250.69 mo
293.799 250.57 li
293.919 250.45 li
294.039 250.57 li
293.919 250.69 li
292.719 250.69 mo
292.599 250.57 li
292.719 250.45 li
292.839 250.57 li
292.719 250.69 li
291.519 250.69 mo
291.399 250.57 li
291.519 250.45 li
291.639 250.57 li
291.519 250.69 li
290.319 250.69 mo
290.199 250.57 li
290.319 250.45 li
290.439 250.57 li
290.319 250.69 li
289.119 250.69 mo
288.999 250.57 li
289.119 250.45 li
289.239 250.57 li
289.119 250.69 li
287.919 250.69 mo
287.799 250.57 li
287.919 250.45 li
288.039 250.57 li
287.919 250.69 li
286.719 250.69 mo
286.599 250.57 li
286.719 250.45 li
286.839 250.57 li
286.719 250.69 li
285.519 250.69 mo
285.399 250.57 li
285.519 250.45 li
285.639 250.57 li
285.519 250.69 li
284.319 250.69 mo
284.199 250.57 li
284.319 250.45 li
284.439 250.57 li
284.319 250.69 li
283.119 250.69 mo
282.999 250.57 li
283.119 250.45 li
283.239 250.57 li
283.119 250.69 li
281.919 250.69 mo
281.799 250.57 li
281.919 250.45 li
282.039 250.57 li
281.919 250.69 li
280.719 250.69 mo
280.599 250.57 li
280.719 250.45 li
280.839 250.57 li
280.719 250.69 li
279.519 250.69 mo
279.399 250.57 li
279.519 250.45 li
279.639 250.57 li
279.519 250.69 li
278.319 250.69 mo
278.199 250.57 li
278.319 250.45 li
278.439 250.57 li
278.319 250.69 li
277.119 250.69 mo
276.999 250.57 li
277.119 250.45 li
277.239 250.57 li
277.119 250.69 li
275.919 250.69 mo
275.799 250.57 li
275.919 250.45 li
276.039 250.57 li
275.919 250.69 li
274.719 250.69 mo
274.599 250.57 li
274.719 250.45 li
274.839 250.57 li
274.719 250.69 li
273.519 250.69 mo
273.399 250.57 li
273.519 250.45 li
273.639 250.57 li
273.519 250.69 li
272.319 250.69 mo
272.199 250.57 li
272.319 250.45 li
272.439 250.57 li
272.319 250.69 li
271.119 250.69 mo
270.999 250.57 li
271.119 250.45 li
271.239 250.57 li
271.119 250.69 li
269.919 250.69 mo
269.799 250.57 li
269.919 250.45 li
270.039 250.57 li
269.919 250.69 li
268.719 250.69 mo
268.599 250.57 li
268.719 250.45 li
268.839 250.57 li
268.719 250.69 li
267.519 250.69 mo
267.399 250.57 li
267.519 250.45 li
267.639 250.57 li
267.519 250.69 li
266.319 250.69 mo
266.199 250.57 li
266.319 250.45 li
266.439 250.57 li
266.319 250.69 li
265.12 250.69 mo
264.999 250.57 li
265.12 250.45 li
265.239 250.57 li
265.12 250.69 li
263.919 250.69 mo
263.799 250.57 li
263.919 250.45 li
264.039 250.57 li
263.919 250.69 li
262.719 250.69 mo
262.599 250.57 li
262.719 250.45 li
262.839 250.57 li
262.719 250.69 li
261.519 250.69 mo
261.399 250.57 li
261.519 250.45 li
261.639 250.57 li
261.519 250.69 li
260.319 250.69 mo
260.199 250.57 li
260.319 250.45 li
260.439 250.57 li
260.319 250.69 li
259.12 250.69 mo
258.999 250.57 li
259.12 250.45 li
259.24 250.57 li
259.12 250.69 li
257.919 250.69 mo
257.799 250.57 li
257.919 250.45 li
258.039 250.57 li
257.919 250.69 li
256.719 250.69 mo
256.599 250.57 li
256.719 250.45 li
256.839 250.57 li
256.719 250.69 li
255.519 250.69 mo
255.399 250.57 li
255.519 250.45 li
255.639 250.57 li
255.519 250.69 li
254.32 250.69 mo
254.199 250.57 li
254.32 250.45 li
254.44 250.57 li
254.32 250.69 li
253.119 250.69 mo
252.999 250.57 li
253.119 250.45 li
253.24 250.57 li
253.119 250.69 li
251.919 250.69 mo
251.799 250.57 li
251.919 250.45 li
252.039 250.57 li
251.919 250.69 li
250.72 250.69 mo
250.6 250.57 li
250.72 250.45 li
250.84 250.57 li
250.72 250.69 li
249.52 250.69 mo
249.4 250.57 li
249.52 250.45 li
249.64 250.57 li
249.52 250.69 li
248.319 250.69 mo
248.199 250.57 li
248.319 250.45 li
248.44 250.57 li
248.319 250.69 li
247.119 250.69 mo
246.999 250.57 li
247.119 250.45 li
247.24 250.57 li
247.119 250.69 li
245.92 250.69 mo
245.8 250.57 li
245.92 250.45 li
246.039 250.57 li
245.92 250.69 li
244.72 250.69 mo
244.6 250.57 li
244.72 250.45 li
244.84 250.57 li
244.72 250.69 li
243.52 250.69 mo
243.4 250.57 li
243.52 250.45 li
243.64 250.57 li
243.52 250.69 li
242.319 250.69 mo
242.199 250.57 li
242.319 250.45 li
242.44 250.57 li
242.319 250.69 li
241.12 250.69 mo
241 250.57 li
241.12 250.45 li
241.239 250.57 li
241.12 250.69 li
239.92 250.69 mo
239.8 250.57 li
239.92 250.45 li
240.04 250.57 li
239.92 250.69 li
238.72 250.69 mo
238.6 250.57 li
238.72 250.45 li
238.84 250.57 li
238.72 250.69 li
237.52 250.69 mo
237.4 250.57 li
237.52 250.45 li
237.64 250.57 li
237.52 250.69 li
236.32 250.69 mo
236.199 250.57 li
236.32 250.45 li
236.439 250.57 li
236.32 250.69 li
235.12 250.69 mo
235 250.57 li
235.12 250.45 li
235.24 250.57 li
235.12 250.69 li
233.92 250.69 mo
233.8 250.57 li
233.92 250.45 li
234.04 250.57 li
233.92 250.69 li
232.72 250.69 mo
232.6 250.57 li
232.72 250.45 li
232.84 250.57 li
232.72 250.69 li
231.52 250.69 mo
231.4 250.57 li
231.52 250.45 li
231.64 250.57 li
231.52 250.69 li
230.32 250.69 mo
230.2 250.57 li
230.32 250.45 li
230.44 250.57 li
230.32 250.69 li
229.12 250.69 mo
229 250.57 li
229.12 250.45 li
229.24 250.57 li
229.12 250.69 li
227.92 250.69 mo
227.8 250.57 li
227.92 250.45 li
228.04 250.57 li
227.92 250.69 li
226.72 250.69 mo
226.6 250.57 li
226.72 250.45 li
226.84 250.57 li
226.72 250.69 li
225.52 250.69 mo
225.4 250.57 li
225.52 250.45 li
225.64 250.57 li
225.52 250.69 li
224.32 250.69 mo
224.2 250.57 li
224.32 250.45 li
224.44 250.57 li
224.32 250.69 li
223.12 250.69 mo
223 250.57 li
223.12 250.45 li
223.24 250.57 li
223.12 250.69 li
221.92 250.69 mo
221.8 250.57 li
221.92 250.45 li
222.04 250.57 li
221.92 250.69 li
220.72 250.69 mo
220.6 250.57 li
220.72 250.45 li
220.84 250.57 li
220.72 250.69 li
219.52 250.69 mo
219.4 250.57 li
219.52 250.45 li
219.64 250.57 li
219.52 250.69 li
218.32 250.69 mo
218.2 250.57 li
218.32 250.45 li
218.44 250.57 li
218.32 250.69 li
217.12 250.69 mo
217 250.57 li
217.12 250.45 li
217.24 250.57 li
217.12 250.69 li
215.92 250.69 mo
215.8 250.57 li
215.92 250.45 li
216.04 250.57 li
215.92 250.69 li
214.72 250.69 mo
214.6 250.57 li
214.72 250.45 li
214.84 250.57 li
214.72 250.69 li
213.52 250.69 mo
213.4 250.57 li
213.52 250.45 li
213.64 250.57 li
213.52 250.69 li
212.32 250.69 mo
212.2 250.57 li
212.32 250.45 li
212.44 250.57 li
212.32 250.69 li
211.12 250.69 mo
211 250.57 li
211.12 250.45 li
211.24 250.57 li
211.12 250.69 li
209.92 250.69 mo
209.8 250.57 li
209.92 250.45 li
210.04 250.57 li
209.92 250.69 li
208.72 250.69 mo
208.6 250.57 li
208.72 250.45 li
208.84 250.57 li
208.72 250.69 li
207.52 250.69 mo
207.4 250.57 li
207.52 250.45 li
207.64 250.57 li
207.52 250.69 li
206.32 250.69 mo
206.2 250.57 li
206.32 250.45 li
206.44 250.57 li
206.32 250.69 li
205.12 250.69 mo
205 250.57 li
205.12 250.45 li
205.24 250.57 li
205.12 250.69 li
203.92 250.69 mo
203.8 250.57 li
203.92 250.45 li
204.04 250.57 li
203.92 250.69 li
202.72 250.69 mo
202.6 250.57 li
202.72 250.45 li
202.84 250.57 li
202.72 250.69 li
201.52 250.69 mo
201.4 250.57 li
201.52 250.45 li
201.64 250.57 li
201.52 250.69 li
200.32 250.69 mo
200.2 250.57 li
200.32 250.45 li
200.44 250.57 li
200.32 250.69 li
199.12 250.69 mo
199 250.57 li
199.12 250.45 li
199.24 250.57 li
199.12 250.69 li
197.92 250.69 mo
197.8 250.57 li
197.92 250.45 li
198.04 250.57 li
197.92 250.69 li
196.72 250.69 mo
196.6 250.57 li
196.72 250.45 li
196.84 250.57 li
196.72 250.69 li
195.52 250.69 mo
195.4 250.57 li
195.52 250.45 li
195.64 250.57 li
195.52 250.69 li
194.32 250.69 mo
194.2 250.57 li
194.32 250.45 li
194.44 250.57 li
194.32 250.69 li
193.12 250.69 mo
193 250.57 li
193.12 250.45 li
193.24 250.57 li
193.12 250.69 li
191.92 250.69 mo
191.8 250.57 li
191.92 250.45 li
192.04 250.57 li
191.92 250.69 li
190.72 250.69 mo
190.6 250.57 li
190.72 250.45 li
190.84 250.57 li
190.72 250.69 li
189.52 250.69 mo
189.4 250.57 li
189.52 250.45 li
189.64 250.57 li
189.52 250.69 li
188.32 250.69 mo
188.2 250.57 li
188.32 250.45 li
188.44 250.57 li
188.32 250.69 li
187.12 250.69 mo
187 250.57 li
187.12 250.45 li
187.24 250.57 li
187.12 250.69 li
185.92 250.69 mo
185.8 250.57 li
185.92 250.45 li
186.04 250.57 li
185.92 250.69 li
184.72 250.69 mo
184.6 250.57 li
184.72 250.45 li
184.84 250.57 li
184.72 250.69 li
183.52 250.69 mo
183.4 250.57 li
183.52 250.45 li
183.64 250.57 li
183.52 250.69 li
182.32 250.69 mo
182.2 250.57 li
182.32 250.45 li
182.44 250.57 li
182.32 250.69 li
181.12 250.69 mo
181 250.57 li
181.12 250.45 li
181.24 250.57 li
181.12 250.69 li
179.92 250.69 mo
179.8 250.57 li
179.92 250.45 li
180.04 250.57 li
179.92 250.69 li
178.72 250.69 mo
178.6 250.57 li
178.72 250.45 li
178.84 250.57 li
178.72 250.69 li
177.52 250.69 mo
177.4 250.57 li
177.52 250.45 li
177.64 250.57 li
177.52 250.69 li
176.32 250.69 mo
176.2 250.57 li
176.32 250.45 li
176.44 250.57 li
176.32 250.69 li
175.12 250.69 mo
175 250.57 li
175.12 250.45 li
175.24 250.57 li
175.12 250.69 li
173.92 250.69 mo
173.8 250.57 li
173.92 250.45 li
174.04 250.57 li
173.92 250.69 li
172.72 250.69 mo
172.6 250.57 li
172.72 250.45 li
172.84 250.57 li
172.72 250.69 li
171.52 250.69 mo
171.4 250.57 li
171.52 250.45 li
171.64 250.57 li
171.52 250.69 li
170.32 250.69 mo
170.2 250.57 li
170.32 250.45 li
170.44 250.57 li
170.32 250.69 li
169.12 250.69 mo
169 250.57 li
169.12 250.45 li
169.24 250.57 li
169.12 250.69 li
167.92 250.69 mo
167.8 250.57 li
167.92 250.45 li
168.04 250.57 li
167.92 250.69 li
166.72 250.69 mo
166.6 250.57 li
166.72 250.45 li
166.84 250.57 li
166.72 250.69 li
165.52 250.69 mo
165.4 250.57 li
165.52 250.45 li
165.64 250.57 li
165.52 250.69 li
164.32 250.69 mo
164.2 250.57 li
164.32 250.45 li
164.44 250.57 li
164.32 250.69 li
163.12 250.69 mo
163 250.57 li
163.12 250.45 li
163.24 250.57 li
163.12 250.69 li
161.92 250.69 mo
161.8 250.57 li
161.92 250.45 li
162.04 250.57 li
161.92 250.69 li
160.72 250.69 mo
160.6 250.57 li
160.72 250.45 li
160.84 250.57 li
160.72 250.69 li
159.52 250.69 mo
159.4 250.57 li
159.52 250.45 li
159.64 250.57 li
159.52 250.69 li
158.32 250.69 mo
158.2 250.57 li
158.32 250.45 li
158.44 250.57 li
158.32 250.69 li
157.12 250.69 mo
157 250.57 li
157.12 250.45 li
157.24 250.57 li
157.12 250.69 li
155.92 250.69 mo
155.8 250.57 li
155.92 250.45 li
156.04 250.57 li
155.92 250.69 li
154.72 250.69 mo
154.6 250.57 li
154.72 250.45 li
154.84 250.57 li
154.72 250.69 li
153.52 250.69 mo
153.4 250.57 li
153.52 250.45 li
153.64 250.57 li
153.52 250.69 li
152.32 250.69 mo
152.2 250.57 li
152.32 250.45 li
152.44 250.57 li
152.32 250.69 li
151.12 250.69 mo
151 250.57 li
151.12 250.45 li
151.24 250.57 li
151.12 250.69 li
149.92 250.69 mo
149.8 250.57 li
149.92 250.45 li
150.04 250.57 li
149.92 250.69 li
148.72 250.69 mo
148.6 250.57 li
148.72 250.45 li
148.84 250.57 li
148.72 250.69 li
147.52 250.69 mo
147.4 250.57 li
147.52 250.45 li
147.64 250.57 li
147.52 250.69 li
146.32 250.69 mo
146.2 250.57 li
146.32 250.45 li
146.44 250.57 li
146.32 250.69 li
145.12 250.69 mo
145 250.57 li
145.12 250.45 li
145.24 250.57 li
145.12 250.69 li
143.92 250.69 mo
143.8 250.57 li
143.92 250.45 li
144.04 250.57 li
143.92 250.69 li
142.72 250.69 mo
142.6 250.57 li
142.72 250.45 li
142.84 250.57 li
142.72 250.69 li
141.52 250.69 mo
141.4 250.57 li
141.52 250.45 li
141.64 250.57 li
141.52 250.69 li
140.32 250.69 mo
140.2 250.57 li
140.32 250.45 li
140.44 250.57 li
140.32 250.69 li
139.12 250.69 mo
139 250.57 li
139.12 250.45 li
139.24 250.57 li
139.12 250.69 li
137.92 250.69 mo
137.8 250.57 li
137.92 250.45 li
138.04 250.57 li
137.92 250.69 li
136.72 250.69 mo
136.6 250.57 li
136.72 250.45 li
136.84 250.57 li
136.72 250.69 li
135.52 250.69 mo
135.4 250.57 li
135.52 250.45 li
135.64 250.57 li
135.52 250.69 li
134.32 250.69 mo
134.2 250.57 li
134.32 250.45 li
134.44 250.57 li
134.32 250.69 li
133.12 250.69 mo
133 250.57 li
133.12 250.45 li
133.24 250.57 li
133.12 250.69 li
131.92 250.69 mo
131.8 250.57 li
131.92 250.45 li
132.04 250.57 li
131.92 250.69 li
130.72 250.69 mo
130.6 250.57 li
130.72 250.45 li
130.84 250.57 li
130.72 250.69 li
129.52 250.69 mo
129.4 250.57 li
129.52 250.45 li
129.64 250.57 li
129.52 250.69 li
128.32 250.69 mo
128.2 250.57 li
128.32 250.45 li
128.44 250.57 li
128.32 250.69 li
127.12 250.69 mo
127 250.57 li
127.12 250.45 li
127.24 250.57 li
127.12 250.69 li
125.92 250.69 mo
125.8 250.57 li
125.92 250.45 li
126.04 250.57 li
125.92 250.69 li
124.72 250.69 mo
124.6 250.57 li
124.72 250.45 li
124.84 250.57 li
124.72 250.69 li
123.52 250.69 mo
123.4 250.57 li
123.52 250.45 li
123.64 250.57 li
123.52 250.69 li
122.32 250.69 mo
122.2 250.57 li
122.32 250.45 li
122.44 250.57 li
122.32 250.69 li
121.12 250.69 mo
121 250.57 li
121.12 250.45 li
121.24 250.57 li
121.12 250.69 li
119.92 250.69 mo
119.8 250.57 li
119.92 250.45 li
120.04 250.57 li
119.92 250.69 li
118.72 250.69 mo
118.6 250.57 li
118.72 250.45 li
118.84 250.57 li
118.72 250.69 li
117.52 250.69 mo
117.4 250.57 li
117.52 250.45 li
117.64 250.57 li
117.52 250.69 li
116.32 250.69 mo
116.2 250.57 li
116.32 250.45 li
116.44 250.57 li
116.32 250.69 li
115.12 250.69 mo
115 250.57 li
115.12 250.45 li
115.24 250.57 li
115.12 250.69 li
113.92 250.69 mo
113.8 250.57 li
113.92 250.45 li
114.04 250.57 li
113.92 250.69 li
112.72 250.69 mo
112.6 250.57 li
112.72 250.45 li
112.84 250.57 li
112.72 250.69 li
111.52 250.69 mo
111.4 250.57 li
111.52 250.45 li
111.64 250.57 li
111.52 250.69 li
110.32 250.69 mo
110.2 250.57 li
110.32 250.45 li
110.44 250.57 li
110.32 250.69 li
109.12 250.69 mo
109 250.57 li
109.12 250.45 li
109.24 250.57 li
109.12 250.69 li
107.92 250.69 mo
107.8 250.57 li
107.92 250.45 li
108.04 250.57 li
107.92 250.69 li
106.72 250.69 mo
106.6 250.57 li
106.72 250.45 li
106.84 250.57 li
106.72 250.69 li
105.52 250.69 mo
105.4 250.57 li
105.52 250.45 li
105.64 250.57 li
105.52 250.69 li
104.32 250.69 mo
104.2 250.57 li
104.32 250.45 li
104.44 250.57 li
104.32 250.69 li
103.12 250.69 mo
103 250.57 li
103.12 250.45 li
103.24 250.57 li
103.12 250.69 li
101.92 250.69 mo
101.8 250.57 li
101.92 250.45 li
102.04 250.57 li
101.92 250.69 li
100.72 250.69 mo
100.6 250.57 li
100.72 250.45 li
100.84 250.57 li
100.72 250.69 li
99.52 250.69 mo
99.4 250.57 li
99.52 250.45 li
99.64 250.57 li
99.52 250.69 li
98.3201 250.69 mo
98.2001 250.57 li
98.3201 250.45 li
98.44 250.57 li
98.3201 250.69 li
97.1201 250.69 mo
97.0001 250.57 li
97.1201 250.45 li
97.2401 250.57 li
97.1201 250.69 li
95.9201 250.69 mo
95.8 250.57 li
95.9201 250.45 li
96.0401 250.57 li
95.9201 250.69 li
94.72 250.69 mo
94.6 250.57 li
94.72 250.45 li
94.8401 250.57 li
94.72 250.69 li
93.52 250.69 mo
93.4 250.57 li
93.52 250.45 li
93.64 250.57 li
93.52 250.69 li
92.3201 250.69 mo
92.2001 250.57 li
92.3201 250.45 li
92.44 250.57 li
92.3201 250.69 li
91.1201 250.69 mo
91.0001 250.57 li
91.1201 250.45 li
91.2401 250.57 li
91.1201 250.69 li
89.9201 250.69 mo
89.8 250.57 li
89.9201 250.45 li
90.0401 250.57 li
89.9201 250.69 li
88.72 250.69 mo
88.6 250.57 li
88.72 250.45 li
88.84 250.57 li
88.72 250.69 li
87.52 250.69 mo
87.4 250.57 li
87.52 250.45 li
87.64 250.57 li
87.52 250.69 li
86.3201 250.69 mo
86.2001 250.57 li
86.3201 250.45 li
86.44 250.57 li
86.3201 250.69 li
85.1201 250.69 mo
85.0001 250.57 li
85.1201 250.45 li
85.2401 250.57 li
85.1201 250.69 li
83.92 250.69 mo
83.8 250.57 li
83.92 250.45 li
84.0401 250.57 li
83.92 250.69 li
82.72 250.69 mo
82.6 250.57 li
82.72 250.45 li
82.84 250.57 li
82.72 250.69 li
81.52 250.69 mo
81.4 250.57 li
81.52 250.45 li
81.64 250.57 li
81.52 250.69 li
80.3201 250.69 mo
80.2001 250.57 li
80.3201 250.45 li
80.44 250.57 li
80.3201 250.69 li
79.1201 250.69 mo
79 250.57 li
79.1201 250.45 li
79.2401 250.57 li
79.1201 250.69 li
77.92 250.69 mo
77.8 250.57 li
77.92 250.45 li
78.0401 250.57 li
77.92 250.69 li
76.72 250.69 mo
76.6 250.57 li
76.72 250.45 li
76.84 250.57 li
76.72 250.69 li
75.5201 250.69 mo
75.4001 250.57 li
75.5201 250.45 li
75.64 250.57 li
75.5201 250.69 li
74.3201 250.69 mo
74.2001 250.57 li
74.3201 250.45 li
74.44 250.57 li
74.3201 250.69 li
73.1201 250.69 mo
73 250.57 li
73.1201 250.45 li
73.2401 250.57 li
73.1201 250.69 li
71.92 250.69 mo
71.8 250.57 li
71.92 250.45 li
72.04 250.57 li
71.92 250.69 li
70.72 250.69 mo
70.6 250.57 li
70.72 250.45 li
70.84 250.57 li
70.72 250.69 li
69.52 250.69 mo
69.4001 250.57 li
69.52 250.45 li
69.64 250.57 li
69.52 250.69 li
68.3201 250.69 mo
68.2001 250.57 li
68.3201 250.45 li
68.4401 250.57 li
68.3201 250.69 li
67.12 250.69 mo
67 250.57 li
67.12 250.45 li
67.2401 250.57 li
67.12 250.69 li
65.92 250.69 mo
65.8 250.57 li
65.92 250.45 li
66.04 250.57 li
65.92 250.69 li
64.72 250.69 mo
64.6 250.57 li
64.72 250.45 li
64.84 250.57 li
64.72 250.69 li
63.52 250.69 mo
63.3999 250.57 li
63.52 250.45 li
63.64 250.57 li
63.52 250.69 li
62.3201 250.69 mo
62.2 250.57 li
62.3201 250.45 li
62.4401 250.57 li
62.3201 250.69 li
61.12 250.69 mo
61 250.57 li
61.12 250.45 li
61.2401 250.57 li
61.12 250.69 li
59.92 250.69 mo
59.8 250.57 li
59.92 250.45 li
60.04 250.57 li
59.92 250.69 li
58.72 250.69 mo
58.6 250.57 li
58.72 250.45 li
58.84 250.57 li
58.72 250.69 li
57.5201 250.69 mo
57.4001 250.57 li
57.5201 250.45 li
57.64 250.57 li
57.5201 250.69 li
56.3201 250.69 mo
56.2 250.57 li
56.3201 250.45 li
56.4401 250.57 li
56.3201 250.69 li
55.12 250.69 mo
55 250.57 li
55.12 250.45 li
55.24 250.57 li
55.12 250.69 li
53.92 250.69 mo
53.8 250.57 li
53.92 250.45 li
54.04 250.57 li
53.92 250.69 li
52.72 250.69 mo
52.6 250.57 li
52.72 250.45 li
52.84 250.57 li
52.72 250.69 li
51.5201 250.69 mo
51.4001 250.57 li
51.5201 250.45 li
51.64 250.57 li
51.5201 250.69 li
50.32 250.69 mo
50.2 250.57 li
50.32 250.45 li
50.4401 250.57 li
50.32 250.69 li
49.12 250.69 mo
49 250.57 li
49.12 250.45 li
49.24 250.57 li
49.12 250.69 li
47.92 250.69 mo
47.8 250.57 li
47.92 250.45 li
48.04 250.57 li
47.92 250.69 li
46.72 250.69 mo
46.5999 250.57 li
46.72 250.45 li
46.84 250.57 li
46.72 250.69 li
45.5201 250.69 mo
45.4 250.57 li
45.5201 250.45 li
45.64 250.57 li
45.5201 250.69 li
44.32 250.69 mo
44.2 250.57 li
44.32 250.45 li
44.44 250.57 li
44.32 250.69 li
43.12 250.69 mo
43 250.57 li
43.12 250.45 li
43.24 250.57 li
43.12 250.69 li
41.92 250.69 mo
41.8 250.57 li
41.92 250.45 li
42.04 250.57 li
41.92 250.69 li
40.72 250.69 mo
40.5999 250.57 li
40.72 250.45 li
40.84 250.57 li
40.72 250.69 li
39.5201 250.69 mo
39.4 250.57 li
39.5201 250.45 li
39.6399 250.57 li
39.5201 250.69 li
38.32 250.69 mo
38.2 250.57 li
38.32 250.45 li
38.44 250.57 li
38.32 250.69 li
37.12 250.69 mo
37 250.57 li
37.12 250.45 li
37.24 250.57 li
37.12 250.69 li
35.92 250.69 mo
35.8 250.57 li
35.92 250.45 li
36.04 250.57 li
35.92 250.69 li
34.7199 250.69 mo
34.6001 250.57 li
34.7199 250.45 li
34.84 250.57 li
34.7199 250.69 li
33.52 250.69 mo
33.4 250.57 li
33.52 250.45 li
33.6399 250.57 li
33.52 250.69 li
32.32 250.69 mo
32.2 250.57 li
32.32 250.45 li
32.44 250.57 li
32.32 250.69 li
31.12 250.69 mo
31 250.57 li
31.12 250.45 li
31.24 250.57 li
31.12 250.69 li
29.92 250.69 mo
29.7999 250.57 li
29.92 250.45 li
30.04 250.57 li
29.92 250.69 li
28.7199 250.69 mo
28.6 250.57 li
28.7199 250.45 li
28.84 250.57 li
28.7199 250.69 li
27.52 250.69 mo
27.4 250.57 li
27.52 250.45 li
27.64 250.57 li
27.52 250.69 li
26.32 250.69 mo
26.2 250.57 li
26.32 250.45 li
26.44 250.57 li
26.32 250.69 li
25.12 250.69 mo
25 250.57 li
25.12 250.45 li
25.24 250.57 li
25.12 250.69 li
23.92 250.69 mo
23.7999 250.57 li
23.92 250.45 li
24.04 250.57 li
23.92 250.69 li
22.72 250.69 mo
22.6 250.57 li
22.72 250.45 li
22.8399 250.57 li
22.72 250.69 li
21.52 250.69 mo
21.4 250.57 li
21.52 250.45 li
21.64 250.57 li
21.52 250.69 li
20.32 250.69 mo
20.2 250.57 li
20.32 250.45 li
20.44 250.57 li
20.32 250.69 li
19.12 250.69 mo
19 250.57 li
19.12 250.45 li
19.24 250.57 li
19.12 250.69 li
17.9199 250.69 mo
17.7999 250.57 li
17.9199 250.45 li
18.04 250.57 li
17.9199 250.69 li
16.72 250.69 mo
16.6 250.57 li
16.72 250.45 li
16.8399 250.57 li
16.72 250.69 li
15.52 250.69 mo
15.4 250.57 li
15.52 250.45 li
15.64 250.57 li
15.52 250.69 li
14.32 250.69 mo
14.2 250.57 li
14.32 250.45 li
14.44 250.57 li
14.32 250.69 li
13.12 250.69 mo
12.9999 250.57 li
13.12 250.45 li
13.24 250.57 li
13.12 250.69 li
11.9199 250.69 mo
11.8 250.57 li
11.9199 250.45 li
12.0399 250.57 li
11.9199 250.69 li
10.72 250.69 mo
10.6 250.57 li
10.72 250.45 li
10.84 250.57 li
10.72 250.69 li
9.52 250.69 mo
9.39999 250.57 li
9.52 250.45 li
9.64001 250.57 li
9.52 250.69 li
8.31998 250.69 mo
8.19996 250.57 li
8.31998 250.45 li
8.43999 250.57 li
8.31998 250.69 li
7.11995 250.69 mo
6.99993 250.57 li
7.11995 250.45 li
7.23996 250.57 li
7.11995 250.69 li
5.92004 250.69 mo
5.80003 250.57 li
5.92004 250.45 li
6.03993 250.57 li
5.92004 250.69 li
4.72002 250.69 mo
4.6 250.57 li
4.72002 250.45 li
4.84003 250.57 li
4.72002 250.69 li
3.51999 250.69 mo
3.39998 250.57 li
3.51999 250.45 li
3.64001 250.57 li
3.51999 250.69 li
2.31996 250.69 mo
2.19995 250.57 li
2.31996 250.45 li
2.43998 250.57 li
2.31996 250.69 li
1.11993 250.69 mo
1.00005 250.57 li
1.06162 250.508 li
1.00005 250.447 li
1.11993 250.327 li
1.23995 250.447 li
1.17831 250.508 li
1.23995 250.57 li
1.11993 250.69 li
433.4 249.771 mo
433.28 249.651 li
433.4 249.531 li
433.52 249.651 li
433.4 249.771 li
1.11993 249.367 mo
1.00005 249.247 li
1.11993 249.127 li
1.23995 249.247 li
1.11993 249.367 li
433.4 248.571 mo
433.28 248.451 li
433.4 248.331 li
433.52 248.451 li
433.4 248.571 li
1.11993 248.167 mo
1.00005 248.047 li
1.11993 247.927 li
1.23995 248.047 li
1.11993 248.167 li
433.4 247.371 mo
433.28 247.251 li
433.4 247.131 li
433.52 247.251 li
433.4 247.371 li
1.11993 246.967 mo
1.00005 246.847 li
1.11993 246.727 li
1.23995 246.847 li
1.11993 246.967 li
433.4 246.171 mo
433.28 246.051 li
433.4 245.931 li
433.52 246.051 li
433.4 246.171 li
1.11993 245.767 mo
1.00005 245.647 li
1.11993 245.527 li
1.23995 245.647 li
1.11993 245.767 li
433.4 244.971 mo
433.28 244.851 li
433.4 244.731 li
433.52 244.851 li
433.4 244.971 li
1.11993 244.567 mo
1.00005 244.447 li
1.11993 244.327 li
1.23995 244.447 li
1.11993 244.567 li
433.4 243.771 mo
433.28 243.651 li
433.4 243.531 li
433.52 243.651 li
433.4 243.771 li
1.11993 243.367 mo
1.00005 243.247 li
1.11993 243.127 li
1.23995 243.247 li
1.11993 243.367 li
433.4 242.571 mo
433.28 242.451 li
433.4 242.331 li
433.52 242.451 li
433.4 242.571 li
1.11993 242.167 mo
1.00005 242.047 li
1.11993 241.927 li
1.23995 242.047 li
1.11993 242.167 li
433.4 241.371 mo
433.28 241.251 li
433.4 241.131 li
433.52 241.251 li
433.4 241.371 li
1.11993 240.967 mo
1.00005 240.847 li
1.11993 240.727 li
1.23995 240.847 li
1.11993 240.967 li
433.4 240.171 mo
433.28 240.051 li
433.4 239.931 li
433.52 240.051 li
433.4 240.171 li
1.11993 239.767 mo
1.00005 239.647 li
1.11993 239.527 li
1.23995 239.647 li
1.11993 239.767 li
433.4 238.971 mo
433.28 238.851 li
433.4 238.731 li
433.52 238.851 li
433.4 238.971 li
1.11993 238.567 mo
1.00005 238.447 li
1.11993 238.327 li
1.23995 238.447 li
1.11993 238.567 li
433.4 237.771 mo
433.28 237.651 li
433.4 237.531 li
433.52 237.651 li
433.4 237.771 li
1.11993 237.367 mo
1.00005 237.247 li
1.11993 237.127 li
1.23995 237.247 li
1.11993 237.367 li
433.4 236.571 mo
433.28 236.451 li
433.4 236.331 li
433.52 236.451 li
433.4 236.571 li
1.11993 236.167 mo
1.00005 236.047 li
1.11993 235.927 li
1.23995 236.047 li
1.11993 236.167 li
433.4 235.371 mo
433.28 235.251 li
433.4 235.131 li
433.52 235.251 li
433.4 235.371 li
1.11993 234.967 mo
1.00005 234.847 li
1.11993 234.727 li
1.23995 234.847 li
1.11993 234.967 li
433.4 234.171 mo
433.28 234.051 li
433.4 233.931 li
433.52 234.051 li
433.4 234.171 li
1.11993 233.767 mo
1.00005 233.647 li
1.11993 233.527 li
1.23995 233.647 li
1.11993 233.767 li
433.4 232.971 mo
433.28 232.851 li
433.4 232.731 li
433.52 232.851 li
433.4 232.971 li
1.11993 232.567 mo
1.00005 232.447 li
1.11993 232.327 li
1.23995 232.447 li
1.11993 232.567 li
433.4 231.771 mo
433.28 231.651 li
433.4 231.531 li
433.52 231.651 li
433.4 231.771 li
1.11993 231.367 mo
1.00005 231.247 li
1.11993 231.127 li
1.23995 231.247 li
1.11993 231.367 li
433.4 230.571 mo
433.28 230.451 li
433.4 230.331 li
433.52 230.451 li
433.4 230.571 li
1.11993 230.167 mo
1.00005 230.047 li
1.11993 229.927 li
1.23995 230.047 li
1.11993 230.167 li
433.4 229.371 mo
433.28 229.251 li
433.4 229.131 li
433.52 229.251 li
433.4 229.371 li
1.11993 228.967 mo
1.00005 228.847 li
1.11993 228.727 li
1.23995 228.847 li
1.11993 228.967 li
433.4 228.171 mo
433.28 228.051 li
433.4 227.931 li
433.52 228.051 li
433.4 228.171 li
1.11993 227.767 mo
1.00005 227.647 li
1.11993 227.527 li
1.23995 227.647 li
1.11993 227.767 li
433.4 226.971 mo
433.28 226.851 li
433.4 226.731 li
433.52 226.851 li
433.4 226.971 li
1.11993 226.567 mo
1.00005 226.447 li
1.11993 226.327 li
1.23995 226.447 li
1.11993 226.567 li
433.4 225.771 mo
433.28 225.651 li
433.4 225.531 li
433.52 225.651 li
433.4 225.771 li
1.11993 225.367 mo
1.00005 225.247 li
1.11993 225.127 li
1.23995 225.247 li
1.11993 225.367 li
433.4 224.571 mo
433.28 224.451 li
433.4 224.331 li
433.52 224.451 li
433.4 224.571 li
1.11993 224.167 mo
1.00005 224.047 li
1.11993 223.927 li
1.23995 224.047 li
1.11993 224.167 li
433.4 223.371 mo
433.28 223.251 li
433.4 223.131 li
433.52 223.251 li
433.4 223.371 li
1.11993 222.967 mo
1.00005 222.847 li
1.11993 222.727 li
1.23995 222.847 li
1.11993 222.967 li
433.4 222.171 mo
433.28 222.051 li
433.4 221.931 li
433.52 222.051 li
433.4 222.171 li
1.11993 221.767 mo
1.00005 221.647 li
1.11993 221.527 li
1.23995 221.647 li
1.11993 221.767 li
433.4 220.971 mo
433.28 220.851 li
433.4 220.731 li
433.52 220.851 li
433.4 220.971 li
1.11993 220.567 mo
1.00005 220.447 li
1.11993 220.327 li
1.23995 220.447 li
1.11993 220.567 li
433.4 219.771 mo
433.28 219.651 li
433.4 219.531 li
433.52 219.651 li
433.4 219.771 li
1.11993 219.367 mo
1.00005 219.247 li
1.11993 219.127 li
1.23995 219.247 li
1.11993 219.367 li
433.4 218.571 mo
433.28 218.451 li
433.4 218.331 li
433.52 218.451 li
433.4 218.571 li
1.11993 218.167 mo
1.00005 218.047 li
1.11993 217.927 li
1.23995 218.047 li
1.11993 218.167 li
433.4 217.371 mo
433.28 217.251 li
433.4 217.131 li
433.52 217.251 li
433.4 217.371 li
1.11993 216.967 mo
1.00005 216.847 li
1.11993 216.727 li
1.23995 216.847 li
1.11993 216.967 li
433.4 216.171 mo
433.28 216.051 li
433.4 215.931 li
433.52 216.051 li
433.4 216.171 li
1.11993 215.767 mo
1.00005 215.647 li
1.11993 215.527 li
1.23995 215.647 li
1.11993 215.767 li
433.4 214.971 mo
433.28 214.851 li
433.4 214.731 li
433.52 214.851 li
433.4 214.971 li
1.11993 214.567 mo
1.00005 214.447 li
1.11993 214.327 li
1.23995 214.447 li
1.11993 214.567 li
433.4 213.771 mo
433.28 213.651 li
433.4 213.531 li
433.52 213.651 li
433.4 213.771 li
1.11993 213.367 mo
1.00005 213.247 li
1.11993 213.127 li
1.23995 213.247 li
1.11993 213.367 li
433.4 212.571 mo
433.28 212.451 li
433.4 212.331 li
433.52 212.451 li
433.4 212.571 li
1.11993 212.167 mo
1.00005 212.047 li
1.11993 211.927 li
1.23995 212.047 li
1.11993 212.167 li
433.4 211.371 mo
433.28 211.251 li
433.4 211.131 li
433.52 211.251 li
433.4 211.371 li
1.11993 210.967 mo
1.00005 210.847 li
1.11993 210.727 li
1.23995 210.847 li
1.11993 210.967 li
433.4 210.171 mo
433.28 210.051 li
433.4 209.931 li
433.52 210.051 li
433.4 210.171 li
1.11993 209.767 mo
1.00005 209.647 li
1.11993 209.527 li
1.23995 209.647 li
1.11993 209.767 li
433.4 208.971 mo
433.28 208.851 li
433.4 208.731 li
433.52 208.851 li
433.4 208.971 li
1.11993 208.567 mo
1.00005 208.447 li
1.11993 208.327 li
1.23995 208.447 li
1.11993 208.567 li
433.4 207.771 mo
433.28 207.651 li
433.4 207.531 li
433.52 207.651 li
433.4 207.771 li
1.11993 207.367 mo
1.00005 207.247 li
1.11993 207.127 li
1.23995 207.247 li
1.11993 207.367 li
433.4 206.571 mo
433.28 206.451 li
433.4 206.331 li
433.52 206.451 li
433.4 206.571 li
1.11993 206.167 mo
1.00005 206.047 li
1.11993 205.927 li
1.23995 206.047 li
1.11993 206.167 li
433.4 205.371 mo
433.28 205.251 li
433.4 205.131 li
433.52 205.251 li
433.4 205.371 li
1.11993 204.967 mo
1.00005 204.847 li
1.11993 204.727 li
1.23995 204.847 li
1.11993 204.967 li
433.4 204.171 mo
433.28 204.051 li
433.4 203.931 li
433.52 204.051 li
433.4 204.171 li
1.11993 203.767 mo
1.00005 203.647 li
1.11993 203.527 li
1.23995 203.647 li
1.11993 203.767 li
433.4 202.971 mo
433.28 202.851 li
433.4 202.731 li
433.52 202.851 li
433.4 202.971 li
1.11993 202.567 mo
1.00005 202.447 li
1.11993 202.327 li
1.23995 202.447 li
1.11993 202.567 li
433.4 201.771 mo
433.28 201.651 li
433.4 201.531 li
433.52 201.651 li
433.4 201.771 li
1.11993 201.367 mo
1.00005 201.247 li
1.11993 201.127 li
1.23995 201.247 li
1.11993 201.367 li
433.4 200.571 mo
433.28 200.451 li
433.4 200.331 li
433.52 200.451 li
433.4 200.571 li
1.11993 200.167 mo
1.00005 200.047 li
1.11993 199.927 li
1.23995 200.047 li
1.11993 200.167 li
433.4 199.371 mo
433.28 199.251 li
433.4 199.131 li
433.52 199.251 li
433.4 199.371 li
1.11993 198.967 mo
1.00005 198.847 li
1.11993 198.727 li
1.23995 198.847 li
1.11993 198.967 li
433.4 198.171 mo
433.28 198.051 li
433.4 197.931 li
433.52 198.051 li
433.4 198.171 li
1.11993 197.767 mo
1.00005 197.647 li
1.11993 197.527 li
1.23995 197.647 li
1.11993 197.767 li
433.4 196.971 mo
433.28 196.851 li
433.4 196.731 li
433.52 196.851 li
433.4 196.971 li
1.11993 196.567 mo
1.00005 196.447 li
1.11993 196.327 li
1.23995 196.447 li
1.11993 196.567 li
433.4 195.771 mo
433.28 195.651 li
433.4 195.531 li
433.52 195.651 li
433.4 195.771 li
1.11993 195.367 mo
1.00005 195.247 li
1.11993 195.127 li
1.23995 195.247 li
1.11993 195.367 li
433.4 194.571 mo
433.28 194.451 li
433.4 194.331 li
433.52 194.451 li
433.4 194.571 li
1.11993 194.167 mo
1.00005 194.047 li
1.11993 193.927 li
1.23995 194.047 li
1.11993 194.167 li
433.4 193.371 mo
433.28 193.251 li
433.4 193.131 li
433.52 193.251 li
433.4 193.371 li
1.11993 192.967 mo
1.00005 192.847 li
1.11993 192.727 li
1.23995 192.847 li
1.11993 192.967 li
433.4 192.171 mo
433.28 192.051 li
433.4 191.931 li
433.52 192.051 li
433.4 192.171 li
1.11993 191.767 mo
1.00005 191.647 li
1.11993 191.527 li
1.23995 191.647 li
1.11993 191.767 li
433.4 190.971 mo
433.28 190.851 li
433.4 190.731 li
433.52 190.851 li
433.4 190.971 li
1.11993 190.567 mo
1.00005 190.447 li
1.11993 190.327 li
1.23995 190.447 li
1.11993 190.567 li
433.4 189.771 mo
433.28 189.651 li
433.4 189.531 li
433.52 189.651 li
433.4 189.771 li
1.11993 189.367 mo
1.00005 189.247 li
1.11993 189.127 li
1.23995 189.247 li
1.11993 189.367 li
433.4 188.571 mo
433.28 188.451 li
433.4 188.331 li
433.52 188.451 li
433.4 188.571 li
1.11993 188.167 mo
1.00005 188.047 li
1.11993 187.927 li
1.23995 188.047 li
1.11993 188.167 li
433.4 187.371 mo
433.28 187.251 li
433.4 187.131 li
433.52 187.251 li
433.4 187.371 li
1.11993 186.967 mo
1.00005 186.847 li
1.11993 186.727 li
1.23995 186.847 li
1.11993 186.967 li
433.4 186.171 mo
433.28 186.051 li
433.4 185.931 li
433.52 186.051 li
433.4 186.171 li
1.11993 185.767 mo
1.00005 185.647 li
1.11993 185.527 li
1.23995 185.647 li
1.11993 185.767 li
433.4 184.971 mo
433.28 184.851 li
433.4 184.731 li
433.52 184.851 li
433.4 184.971 li
1.11993 184.567 mo
1.00005 184.447 li
1.11993 184.327 li
1.23995 184.447 li
1.11993 184.567 li
433.4 183.771 mo
433.28 183.651 li
433.4 183.531 li
433.52 183.651 li
433.4 183.771 li
1.11993 183.367 mo
1.00005 183.247 li
1.11993 183.127 li
1.23995 183.247 li
1.11993 183.367 li
433.4 182.571 mo
433.28 182.451 li
433.4 182.331 li
433.52 182.451 li
433.4 182.571 li
1.11993 182.167 mo
1.00005 182.047 li
1.11993 181.927 li
1.23995 182.047 li
1.11993 182.167 li
433.4 181.371 mo
433.28 181.251 li
433.4 181.131 li
433.52 181.251 li
433.4 181.371 li
1.11993 180.967 mo
1.00005 180.847 li
1.11993 180.727 li
1.23995 180.847 li
1.11993 180.967 li
433.4 180.171 mo
433.28 180.051 li
433.4 179.931 li
433.52 180.051 li
433.4 180.171 li
1.11993 179.767 mo
1.00005 179.647 li
1.11993 179.527 li
1.23995 179.647 li
1.11993 179.767 li
433.4 178.971 mo
433.28 178.851 li
433.4 178.731 li
433.52 178.851 li
433.4 178.971 li
1.11993 178.567 mo
1.00005 178.447 li
1.11993 178.327 li
1.23995 178.447 li
1.11993 178.567 li
433.4 177.771 mo
433.28 177.651 li
433.4 177.531 li
433.52 177.651 li
433.4 177.771 li
1.11993 177.367 mo
1.00005 177.247 li
1.11993 177.127 li
1.23995 177.247 li
1.11993 177.367 li
433.4 176.571 mo
433.28 176.451 li
433.4 176.331 li
433.52 176.451 li
433.4 176.571 li
1.11993 176.167 mo
1.00005 176.047 li
1.11993 175.927 li
1.23995 176.047 li
1.11993 176.167 li
433.4 175.371 mo
433.28 175.251 li
433.4 175.131 li
433.52 175.251 li
433.4 175.371 li
1.11993 174.967 mo
1.00005 174.847 li
1.11993 174.727 li
1.23995 174.847 li
1.11993 174.967 li
433.4 174.171 mo
433.28 174.051 li
433.4 173.931 li
433.52 174.051 li
433.4 174.171 li
1.11993 173.767 mo
1.00005 173.647 li
1.11993 173.527 li
1.23995 173.647 li
1.11993 173.767 li
433.4 172.971 mo
433.28 172.851 li
433.4 172.731 li
433.52 172.851 li
433.4 172.971 li
1.11993 172.567 mo
1.00005 172.447 li
1.11993 172.327 li
1.23995 172.447 li
1.11993 172.567 li
433.4 171.771 mo
433.28 171.651 li
433.4 171.531 li
433.52 171.651 li
433.4 171.771 li
1.11993 171.367 mo
1.00005 171.247 li
1.11993 171.127 li
1.23995 171.247 li
1.11993 171.367 li
433.4 170.571 mo
433.28 170.451 li
433.4 170.331 li
433.52 170.451 li
433.4 170.571 li
1.11993 170.167 mo
1.00005 170.047 li
1.11993 169.927 li
1.23995 170.047 li
1.11993 170.167 li
433.4 169.371 mo
433.28 169.251 li
433.4 169.131 li
433.52 169.251 li
433.4 169.371 li
1.11993 168.967 mo
1.00005 168.847 li
1.11993 168.727 li
1.23995 168.847 li
1.11993 168.967 li
433.4 168.171 mo
433.28 168.051 li
433.4 167.931 li
433.52 168.051 li
433.4 168.171 li
1.11993 167.767 mo
1.00005 167.647 li
1.11993 167.527 li
1.23995 167.647 li
1.11993 167.767 li
433.4 166.971 mo
433.28 166.851 li
433.4 166.731 li
433.52 166.851 li
433.4 166.971 li
1.11993 166.567 mo
1.00005 166.447 li
1.11993 166.327 li
1.23995 166.447 li
1.11993 166.567 li
433.4 165.771 mo
433.28 165.651 li
433.4 165.531 li
433.52 165.651 li
433.4 165.771 li
1.11993 165.367 mo
1.00005 165.247 li
1.11993 165.127 li
1.23995 165.247 li
1.11993 165.367 li
433.4 164.571 mo
433.28 164.451 li
433.4 164.331 li
433.52 164.451 li
433.4 164.571 li
1.11993 164.167 mo
1.00005 164.047 li
1.11993 163.927 li
1.23995 164.047 li
1.11993 164.167 li
433.4 163.371 mo
433.28 163.251 li
433.4 163.131 li
433.52 163.251 li
433.4 163.371 li
1.11993 162.967 mo
1.00005 162.847 li
1.11993 162.727 li
1.23995 162.847 li
1.11993 162.967 li
433.4 162.171 mo
433.28 162.051 li
433.4 161.931 li
433.52 162.051 li
433.4 162.171 li
1.11993 161.767 mo
1.00005 161.647 li
1.11993 161.527 li
1.23995 161.647 li
1.11993 161.767 li
433.4 160.971 mo
433.28 160.851 li
433.4 160.731 li
433.52 160.851 li
433.4 160.971 li
1.11993 160.567 mo
1.00005 160.447 li
1.11993 160.327 li
1.23995 160.447 li
1.11993 160.567 li
433.4 159.771 mo
433.28 159.651 li
433.4 159.531 li
433.52 159.651 li
433.4 159.771 li
1.11993 159.367 mo
1.00005 159.247 li
1.11993 159.127 li
1.23995 159.247 li
1.11993 159.367 li
433.4 158.571 mo
433.28 158.451 li
433.4 158.331 li
433.52 158.451 li
433.4 158.571 li
1.11993 158.167 mo
1.00005 158.047 li
1.11993 157.927 li
1.23995 158.047 li
1.11993 158.167 li
433.4 157.371 mo
433.28 157.251 li
433.4 157.131 li
433.52 157.251 li
433.4 157.371 li
1.11993 156.967 mo
1.00005 156.847 li
1.11993 156.727 li
1.23995 156.847 li
1.11993 156.967 li
433.4 156.171 mo
433.28 156.051 li
433.4 155.931 li
433.52 156.051 li
433.4 156.171 li
1.11993 155.767 mo
1.00005 155.647 li
1.11993 155.527 li
1.23995 155.647 li
1.11993 155.767 li
433.4 154.971 mo
433.28 154.851 li
433.4 154.731 li
433.52 154.851 li
433.4 154.971 li
1.11993 154.567 mo
1.00005 154.447 li
1.11993 154.327 li
1.23995 154.447 li
1.11993 154.567 li
433.4 153.771 mo
433.28 153.651 li
433.4 153.531 li
433.52 153.651 li
433.4 153.771 li
1.11993 153.367 mo
1.00005 153.247 li
1.11993 153.127 li
1.23995 153.247 li
1.11993 153.367 li
433.4 152.571 mo
433.28 152.451 li
433.4 152.331 li
433.52 152.451 li
433.4 152.571 li
1.11993 152.167 mo
1.00005 152.047 li
1.11993 151.927 li
1.23995 152.047 li
1.11993 152.167 li
433.4 151.371 mo
433.28 151.251 li
433.4 151.131 li
433.52 151.251 li
433.4 151.371 li
1.11993 150.967 mo
1.00005 150.847 li
1.11993 150.727 li
1.23995 150.847 li
1.11993 150.967 li
433.4 150.171 mo
433.28 150.051 li
433.4 149.931 li
433.52 150.051 li
433.4 150.171 li
1.11993 149.767 mo
1.00005 149.647 li
1.11993 149.527 li
1.23995 149.647 li
1.11993 149.767 li
433.4 148.971 mo
433.28 148.851 li
433.4 148.731 li
433.52 148.851 li
433.4 148.971 li
1.11993 148.567 mo
1.00005 148.447 li
1.11993 148.327 li
1.23995 148.447 li
1.11993 148.567 li
433.4 147.771 mo
433.28 147.651 li
433.4 147.531 li
433.52 147.651 li
433.4 147.771 li
1.11993 147.367 mo
1.00005 147.247 li
1.11993 147.127 li
1.23995 147.247 li
1.11993 147.367 li
433.4 146.571 mo
433.28 146.451 li
433.4 146.331 li
433.52 146.451 li
433.4 146.571 li
1.11993 146.167 mo
1.00005 146.047 li
1.11993 145.927 li
1.23995 146.047 li
1.11993 146.167 li
433.4 145.371 mo
433.28 145.251 li
433.4 145.131 li
433.52 145.251 li
433.4 145.371 li
1.11993 144.967 mo
1.00005 144.847 li
1.11993 144.727 li
1.23995 144.847 li
1.11993 144.967 li
433.4 144.171 mo
433.28 144.051 li
433.4 143.931 li
433.52 144.051 li
433.4 144.171 li
1.11993 143.767 mo
1.00005 143.647 li
1.11993 143.527 li
1.23995 143.647 li
1.11993 143.767 li
433.4 142.971 mo
433.28 142.851 li
433.4 142.731 li
433.52 142.851 li
433.4 142.971 li
1.11993 142.567 mo
1.00005 142.447 li
1.11993 142.327 li
1.23995 142.447 li
1.11993 142.567 li
433.4 141.771 mo
433.28 141.651 li
433.4 141.531 li
433.52 141.651 li
433.4 141.771 li
1.11993 141.367 mo
1.00005 141.247 li
1.11993 141.127 li
1.23995 141.247 li
1.11993 141.367 li
433.4 140.571 mo
433.28 140.451 li
433.4 140.331 li
433.52 140.451 li
433.4 140.571 li
1.11993 140.167 mo
1.00005 140.047 li
1.11993 139.927 li
1.23995 140.047 li
1.11993 140.167 li
433.4 139.371 mo
433.28 139.251 li
433.4 139.131 li
433.52 139.251 li
433.4 139.371 li
1.11993 138.967 mo
1.00005 138.847 li
1.11993 138.727 li
1.23995 138.847 li
1.11993 138.967 li
433.4 138.171 mo
433.28 138.051 li
433.4 137.931 li
433.52 138.051 li
433.4 138.171 li
1.11993 137.767 mo
1.00005 137.647 li
1.11993 137.527 li
1.23995 137.647 li
1.11993 137.767 li
433.4 136.971 mo
433.28 136.851 li
433.4 136.731 li
433.52 136.851 li
433.4 136.971 li
1.11993 136.567 mo
1.00005 136.447 li
1.11993 136.327 li
1.23995 136.447 li
1.11993 136.567 li
433.4 135.771 mo
433.28 135.651 li
433.4 135.531 li
433.52 135.651 li
433.4 135.771 li
1.11993 135.367 mo
1.00005 135.247 li
1.11993 135.127 li
1.23995 135.247 li
1.11993 135.367 li
433.4 134.571 mo
433.28 134.451 li
433.4 134.331 li
433.52 134.451 li
433.4 134.571 li
1.11993 134.167 mo
1.00005 134.047 li
1.11993 133.927 li
1.23995 134.047 li
1.11993 134.167 li
433.4 133.371 mo
433.28 133.251 li
433.4 133.131 li
433.52 133.251 li
433.4 133.371 li
1.11993 132.967 mo
1.00005 132.847 li
1.11993 132.727 li
1.23995 132.847 li
1.11993 132.967 li
433.4 132.171 mo
433.28 132.051 li
433.4 131.931 li
433.52 132.051 li
433.4 132.171 li
1.11993 131.767 mo
1.00005 131.647 li
1.11993 131.527 li
1.23995 131.647 li
1.11993 131.767 li
433.4 130.971 mo
433.28 130.851 li
433.4 130.731 li
433.52 130.851 li
433.4 130.971 li
1.11993 130.567 mo
1.00005 130.447 li
1.11993 130.327 li
1.23995 130.447 li
1.11993 130.567 li
433.4 129.771 mo
433.28 129.651 li
433.4 129.531 li
433.52 129.651 li
433.4 129.771 li
1.11993 129.367 mo
1.00005 129.247 li
1.11993 129.127 li
1.23995 129.247 li
1.11993 129.367 li
433.4 128.571 mo
433.28 128.451 li
433.4 128.331 li
433.52 128.451 li
433.4 128.571 li
1.11993 128.167 mo
1.00005 128.047 li
1.11993 127.927 li
1.23995 128.047 li
1.11993 128.167 li
433.4 127.371 mo
433.28 127.251 li
433.4 127.131 li
433.52 127.251 li
433.4 127.371 li
1.11993 126.967 mo
1.00005 126.847 li
1.11993 126.727 li
1.23995 126.847 li
1.11993 126.967 li
433.4 126.172 mo
433.28 126.051 li
433.4 125.931 li
433.52 126.051 li
433.4 126.172 li
1.11993 125.767 mo
1.00005 125.647 li
1.11993 125.527 li
1.23995 125.647 li
1.11993 125.767 li
433.4 124.971 mo
433.28 124.851 li
433.4 124.731 li
433.52 124.851 li
433.4 124.971 li
1.11993 124.567 mo
1.00005 124.447 li
1.11993 124.327 li
1.23995 124.447 li
1.11993 124.567 li
433.4 123.771 mo
433.28 123.651 li
433.4 123.531 li
433.52 123.651 li
433.4 123.771 li
1.11993 123.367 mo
1.00005 123.247 li
1.11993 123.127 li
1.23995 123.247 li
1.11993 123.367 li
433.4 122.571 mo
433.28 122.451 li
433.4 122.331 li
433.52 122.451 li
433.4 122.571 li
1.11993 122.167 mo
1.00005 122.047 li
1.11993 121.927 li
1.23995 122.047 li
1.11993 122.167 li
433.4 121.372 mo
433.28 121.251 li
433.4 121.131 li
433.52 121.251 li
433.4 121.372 li
1.11993 120.967 mo
1.00005 120.847 li
1.11993 120.727 li
1.23995 120.847 li
1.11993 120.967 li
433.4 120.171 mo
433.28 120.051 li
433.4 119.931 li
433.52 120.051 li
433.4 120.171 li
1.11993 119.767 mo
1.00005 119.647 li
1.11993 119.527 li
1.23995 119.647 li
1.11993 119.767 li
433.4 118.971 mo
433.28 118.851 li
433.4 118.731 li
433.52 118.851 li
433.4 118.971 li
1.11993 118.567 mo
1.00005 118.447 li
1.11993 118.327 li
1.23995 118.447 li
1.11993 118.567 li
433.4 117.771 mo
433.28 117.651 li
433.4 117.531 li
433.52 117.651 li
433.4 117.771 li
1.11993 117.367 mo
1.00005 117.247 li
1.11993 117.127 li
1.23995 117.247 li
1.11993 117.367 li
433.4 116.571 mo
433.28 116.451 li
433.4 116.331 li
433.52 116.451 li
433.4 116.571 li
1.11993 116.167 mo
1.00005 116.047 li
1.11993 115.927 li
1.23995 116.047 li
1.11993 116.167 li
433.4 115.372 mo
433.28 115.251 li
433.4 115.131 li
433.52 115.251 li
433.4 115.372 li
1.11993 114.967 mo
1.00005 114.847 li
1.11993 114.727 li
1.23995 114.847 li
1.11993 114.967 li
433.4 114.171 mo
433.28 114.051 li
433.4 113.931 li
433.52 114.051 li
433.4 114.171 li
1.11993 113.767 mo
1.00005 113.647 li
1.11993 113.527 li
1.23995 113.647 li
1.11993 113.767 li
433.4 112.971 mo
433.28 112.851 li
433.4 112.731 li
433.52 112.851 li
433.4 112.971 li
1.11993 112.567 mo
1.00005 112.447 li
1.11993 112.327 li
1.23995 112.447 li
1.11993 112.567 li
433.4 111.771 mo
433.28 111.651 li
433.4 111.531 li
433.52 111.651 li
433.4 111.771 li
1.11993 111.367 mo
1.00005 111.247 li
1.11993 111.127 li
1.23995 111.247 li
1.11993 111.367 li
433.4 110.572 mo
433.28 110.452 li
433.4 110.331 li
433.52 110.452 li
433.4 110.572 li
1.11993 110.167 mo
1.00005 110.047 li
1.11993 109.927 li
1.23995 110.047 li
1.11993 110.167 li
433.4 109.371 mo
433.28 109.251 li
433.4 109.131 li
433.52 109.251 li
433.4 109.371 li
1.11993 108.967 mo
1.00005 108.847 li
1.11993 108.727 li
1.23995 108.847 li
1.11993 108.967 li
433.4 108.171 mo
433.28 108.051 li
433.4 107.931 li
433.52 108.051 li
433.4 108.171 li
1.11993 107.767 mo
1.00005 107.647 li
1.11993 107.527 li
1.23995 107.647 li
1.11993 107.767 li
433.4 106.971 mo
433.28 106.851 li
433.4 106.731 li
433.52 106.851 li
433.4 106.971 li
1.11993 106.567 mo
1.00005 106.447 li
1.11993 106.327 li
1.23995 106.447 li
1.11993 106.567 li
433.4 105.772 mo
433.28 105.651 li
433.4 105.531 li
433.52 105.651 li
433.4 105.772 li
1.11993 105.367 mo
1.00005 105.247 li
1.11993 105.127 li
1.23995 105.247 li
1.11993 105.367 li
433.4 104.572 mo
433.28 104.451 li
433.4 104.331 li
433.52 104.451 li
433.4 104.572 li
1.11993 104.167 mo
1.00005 104.047 li
1.11993 103.927 li
1.23995 104.047 li
1.11993 104.167 li
433.4 103.371 mo
433.28 103.251 li
433.4 103.131 li
433.52 103.251 li
433.4 103.371 li
1.11993 102.967 mo
1.00005 102.847 li
1.11993 102.727 li
1.23995 102.847 li
1.11993 102.967 li
433.4 102.171 mo
433.28 102.051 li
433.4 101.931 li
433.52 102.051 li
433.4 102.171 li
1.11993 101.767 mo
1.00005 101.647 li
1.11993 101.527 li
1.23995 101.647 li
1.11993 101.767 li
433.4 100.972 mo
433.28 100.852 li
433.4 100.732 li
433.52 100.852 li
433.4 100.972 li
1.11993 100.567 mo
1.00005 100.447 li
1.11993 100.327 li
1.23995 100.447 li
1.11993 100.567 li
433.4 99.7715 mo
433.28 99.6515 li
433.4 99.5315 li
433.52 99.6515 li
433.4 99.7715 li
1.11993 99.3671 mo
1.00005 99.2471 li
1.11993 99.1271 li
1.23995 99.2471 li
1.11993 99.3671 li
433.4 98.5715 mo
433.28 98.4515 li
433.4 98.3315 li
433.52 98.4515 li
433.4 98.5715 li
1.11993 98.1672 mo
1.00005 98.0472 li
1.11993 97.9272 li
1.23995 98.0472 li
1.11993 98.1672 li
433.4 97.3716 mo
433.28 97.2515 li
433.4 97.1316 li
433.52 97.2515 li
433.4 97.3716 li
1.11993 96.9672 mo
1.00005 96.8472 li
1.11993 96.7272 li
1.23995 96.8472 li
1.11993 96.9672 li
433.4 96.1716 mo
433.28 96.0516 li
433.4 95.9315 li
433.52 96.0516 li
433.4 96.1716 li
1.11993 95.7672 mo
1.00005 95.6472 li
1.11993 95.5271 li
1.23995 95.6472 li
1.11993 95.7672 li
433.4 94.9715 mo
433.28 94.8515 li
433.4 94.7315 li
433.52 94.8515 li
433.4 94.9715 li
1.11993 94.5671 mo
1.00005 94.4471 li
1.11993 94.3271 li
1.23995 94.4471 li
1.11993 94.5671 li
433.4 93.7715 mo
433.28 93.6515 li
433.4 93.5315 li
433.52 93.6515 li
433.4 93.7715 li
1.11993 93.3672 mo
1.00005 93.2471 li
1.11993 93.1271 li
1.23995 93.2471 li
1.11993 93.3672 li
433.4 92.5715 mo
433.28 92.4515 li
433.4 92.3315 li
433.52 92.4515 li
433.4 92.5715 li
1.11993 92.1672 mo
1.00005 92.0472 li
1.11993 91.9272 li
1.23995 92.0472 li
1.11993 92.1672 li
433.4 91.3716 mo
433.28 91.2516 li
433.4 91.1316 li
433.52 91.2516 li
433.4 91.3716 li
1.11993 90.9672 mo
1.00005 90.8472 li
1.11993 90.7272 li
1.23995 90.8472 li
1.11993 90.9672 li
433.4 90.1716 mo
433.28 90.0516 li
433.4 89.9315 li
433.52 90.0516 li
433.4 90.1716 li
1.11993 89.7672 mo
1.00005 89.6471 li
1.11993 89.5271 li
1.23995 89.6471 li
1.11993 89.7672 li
433.4 88.9715 mo
433.28 88.8515 li
433.4 88.7315 li
433.52 88.8515 li
433.4 88.9715 li
1.11993 88.5673 mo
1.00005 88.4471 li
1.11993 88.3271 li
1.23995 88.4471 li
1.11993 88.5673 li
433.4 87.7716 mo
433.28 87.6515 li
433.4 87.5316 li
433.52 87.6515 li
433.4 87.7716 li
1.11993 87.3672 mo
1.00005 87.2471 li
1.11993 87.1271 li
1.23995 87.2471 li
1.11993 87.3672 li
433.4 86.5716 mo
433.28 86.4516 li
433.4 86.3316 li
433.52 86.4516 li
433.4 86.5716 li
1.11993 86.1672 mo
1.00005 86.0472 li
1.11993 85.9272 li
1.23995 86.0472 li
1.11993 86.1672 li
433.4 85.3716 mo
433.28 85.2516 li
433.4 85.1316 li
433.52 85.2516 li
433.4 85.3716 li
1.11993 84.9672 mo
1.00005 84.8472 li
1.11993 84.7271 li
1.23995 84.8472 li
1.11993 84.9672 li
433.4 84.1717 mo
433.28 84.0515 li
433.4 83.9315 li
433.52 84.0515 li
433.4 84.1717 li
1.11993 83.7672 mo
1.00005 83.6471 li
1.11993 83.5271 li
1.23995 83.6471 li
1.11993 83.7672 li
433.4 82.9717 mo
433.28 82.8515 li
433.4 82.7316 li
433.52 82.8515 li
433.4 82.9717 li
1.11993 82.5672 mo
1.00005 82.4471 li
1.11993 82.3271 li
1.23995 82.4471 li
1.11993 82.5672 li
433.4 81.7716 mo
433.28 81.6515 li
433.4 81.5316 li
433.52 81.6515 li
433.4 81.7716 li
1.11993 81.3672 mo
1.00005 81.2471 li
1.11993 81.1272 li
1.23995 81.2471 li
1.11993 81.3672 li
433.4 80.5716 mo
433.28 80.4516 li
433.4 80.3316 li
433.52 80.4516 li
433.4 80.5716 li
1.11993 80.1672 mo
1.00005 80.0472 li
1.11993 79.9272 li
1.23995 80.0472 li
1.11993 80.1672 li
433.4 79.3717 mo
433.28 79.2516 li
433.4 79.1315 li
433.52 79.2516 li
433.4 79.3717 li
1.11993 78.9672 mo
1.00005 78.8472 li
1.11993 78.7271 li
1.23995 78.8472 li
1.11993 78.9672 li
433.4 78.1717 mo
433.28 78.0515 li
433.4 77.9316 li
433.52 78.0515 li
433.4 78.1717 li
1.11993 77.7673 mo
1.00005 77.6471 li
1.11993 77.5271 li
1.23995 77.6471 li
1.11993 77.7673 li
433.4 76.9716 mo
433.28 76.8515 li
433.4 76.7316 li
433.52 76.8515 li
433.4 76.9716 li
1.11993 76.5672 mo
1.00005 76.4471 li
1.11993 76.3272 li
1.23995 76.4471 li
1.11993 76.5672 li
433.4 75.7716 mo
433.28 75.6516 li
433.4 75.5316 li
433.52 75.6516 li
433.4 75.7716 li
1.11993 75.3672 mo
1.00005 75.2471 li
1.11993 75.1272 li
1.23995 75.2471 li
1.11993 75.3672 li
433.4 74.5717 mo
433.28 74.4516 li
433.4 74.3316 li
433.52 74.4516 li
433.4 74.5717 li
1.11993 74.1672 mo
1.00005 74.0472 li
1.11993 73.9272 li
1.23995 74.0472 li
1.11993 74.1672 li
433.4 73.3717 mo
433.28 73.2515 li
433.4 73.1315 li
433.52 73.2515 li
433.4 73.3717 li
1.11993 72.9673 mo
1.00005 72.8471 li
1.11993 72.7271 li
1.23995 72.8471 li
1.11993 72.9673 li
433.4 72.1717 mo
433.28 72.0515 li
433.4 71.9316 li
433.52 72.0515 li
433.4 72.1717 li
432.262 72.1101 mo
432.262 72.11 li
432.142 71.9899 li
432.262 71.8701 li
432.382 71.9899 li
432.262 72.1101 li
431.062 72.1101 mo
431.062 72.11 li
430.942 71.9899 li
431.062 71.8701 li
431.182 71.9899 li
431.062 72.1101 li
429.862 72.1101 mo
429.862 72.11 li
429.742 71.9899 li
429.862 71.8701 li
429.982 71.9899 li
429.862 72.1101 li
428.662 72.1101 mo
428.662 72.11 li
428.542 71.9899 li
428.662 71.8701 li
428.782 71.9899 li
428.662 72.1101 li
427.462 72.1101 mo
427.462 72.11 li
427.342 71.9899 li
427.462 71.8701 li
427.582 71.9899 li
427.462 72.1101 li
426.262 72.1101 mo
426.262 72.11 li
426.142 71.9899 li
426.262 71.8701 li
426.382 71.9899 li
426.262 72.1101 li
425.062 72.1101 mo
425.062 72.11 li
424.942 71.9899 li
425.062 71.8701 li
425.182 71.9899 li
425.062 72.1101 li
423.862 72.1101 mo
423.862 72.11 li
423.742 71.9899 li
423.862 71.8701 li
423.982 71.9899 li
423.862 72.1101 li
422.662 72.1101 mo
422.662 72.11 li
422.542 71.9899 li
422.662 71.8701 li
422.782 71.9899 li
422.662 72.1101 li
421.462 72.1101 mo
421.462 72.11 li
421.342 71.9899 li
421.462 71.8701 li
421.582 71.9899 li
421.462 72.1101 li
420.262 72.1101 mo
420.262 72.11 li
420.142 71.9899 li
420.262 71.8701 li
420.382 71.9899 li
420.262 72.1101 li
419.062 72.1101 mo
419.062 72.11 li
418.942 71.9899 li
419.062 71.8701 li
419.182 71.9899 li
419.062 72.1101 li
417.862 72.1101 mo
417.862 72.11 li
417.742 71.9899 li
417.862 71.8701 li
417.982 71.9899 li
417.862 72.1101 li
416.662 72.1101 mo
416.662 72.11 li
416.542 71.9899 li
416.662 71.8701 li
416.782 71.9899 li
416.662 72.1101 li
415.462 72.1101 mo
415.462 72.11 li
415.342 71.9899 li
415.462 71.8701 li
415.582 71.9899 li
415.462 72.1101 li
414.262 72.1101 mo
414.262 72.11 li
414.142 71.9899 li
414.262 71.8701 li
414.382 71.9899 li
414.262 72.1101 li
413.062 72.1101 mo
413.062 72.11 li
412.942 71.9899 li
413.062 71.8701 li
413.182 71.9899 li
413.062 72.1101 li
411.862 72.1101 mo
411.862 72.11 li
411.742 71.9899 li
411.862 71.8701 li
411.982 71.9899 li
411.862 72.1101 li
410.662 72.1101 mo
410.662 72.11 li
410.542 71.9899 li
410.662 71.8701 li
410.782 71.9899 li
410.662 72.1101 li
409.462 72.1101 mo
409.462 72.11 li
409.342 71.9899 li
409.462 71.8701 li
409.582 71.9899 li
409.462 72.1101 li
408.262 72.1101 mo
408.262 72.11 li
408.142 71.9899 li
408.262 71.8701 li
408.382 71.9899 li
408.262 72.1101 li
407.062 72.1101 mo
407.062 72.11 li
406.942 71.9899 li
407.062 71.8701 li
407.182 71.9899 li
407.062 72.1101 li
405.862 72.1101 mo
405.862 72.11 li
405.742 71.9899 li
405.862 71.8701 li
405.982 71.9899 li
405.862 72.1101 li
404.662 72.1101 mo
404.662 72.11 li
404.542 71.9899 li
404.662 71.8701 li
404.782 71.9899 li
404.662 72.1101 li
403.462 72.1101 mo
403.462 72.11 li
403.342 71.9899 li
403.462 71.8701 li
403.582 71.9899 li
403.462 72.1101 li
402.262 72.1101 mo
402.262 72.11 li
402.142 71.9899 li
402.262 71.8701 li
402.382 71.9899 li
402.262 72.1101 li
401.062 72.1101 mo
401.062 72.11 li
400.942 71.9899 li
401.062 71.8701 li
401.182 71.9899 li
401.062 72.1101 li
399.862 72.1101 mo
399.862 72.11 li
399.742 71.9899 li
399.862 71.8701 li
399.982 71.9899 li
399.862 72.1101 li
398.662 72.1101 mo
398.662 72.11 li
398.542 71.9899 li
398.662 71.8701 li
398.782 71.9899 li
398.662 72.1101 li
397.462 72.1101 mo
397.462 72.11 li
397.342 71.9899 li
397.462 71.8701 li
397.582 71.9899 li
397.462 72.1101 li
396.262 72.1101 mo
396.262 72.11 li
396.142 71.9899 li
396.262 71.8701 li
396.382 71.9899 li
396.262 72.1101 li
395.062 72.1101 mo
395.062 72.11 li
394.942 71.9899 li
395.062 71.8701 li
395.182 71.9899 li
395.062 72.1101 li
393.862 72.1101 mo
393.862 72.11 li
393.742 71.9899 li
393.862 71.8701 li
393.982 71.9899 li
393.862 72.1101 li
392.662 72.1101 mo
392.662 72.11 li
392.542 71.9899 li
392.662 71.8701 li
392.782 71.9899 li
392.662 72.1101 li
391.462 72.1101 mo
391.462 72.11 li
391.342 71.9899 li
391.462 71.8701 li
391.582 71.9899 li
391.462 72.1101 li
390.262 72.1101 mo
390.262 72.11 li
390.142 71.9899 li
390.262 71.8701 li
390.382 71.9899 li
390.262 72.1101 li
389.062 72.1101 mo
389.062 72.11 li
388.942 71.9899 li
389.062 71.8701 li
389.182 71.9899 li
389.062 72.1101 li
387.862 72.1101 mo
387.862 72.11 li
387.742 71.9899 li
387.862 71.8701 li
387.982 71.9899 li
387.862 72.1101 li
386.662 72.1101 mo
386.662 72.11 li
386.542 71.9899 li
386.662 71.8701 li
386.782 71.9899 li
386.662 72.1101 li
385.462 72.1101 mo
385.462 72.11 li
385.342 71.9899 li
385.462 71.8701 li
385.582 71.9899 li
385.462 72.1101 li
384.262 72.1101 mo
384.262 72.11 li
384.141 71.9899 li
384.262 71.8701 li
384.382 71.9899 li
384.262 72.1101 li
383.062 72.1101 mo
383.062 72.11 li
382.942 71.9899 li
383.062 71.8701 li
383.182 71.9899 li
383.062 72.1101 li
381.862 72.1101 mo
381.862 72.11 li
381.742 71.9899 li
381.862 71.8701 li
381.982 71.9899 li
381.862 72.1101 li
380.662 72.1101 mo
380.662 72.11 li
380.542 71.9899 li
380.662 71.8701 li
380.782 71.9899 li
380.662 72.1101 li
379.462 72.1101 mo
379.462 72.11 li
379.341 71.9899 li
379.462 71.8701 li
379.582 71.9899 li
379.462 72.1101 li
378.262 72.1101 mo
378.262 72.11 li
378.141 71.9899 li
378.262 71.8701 li
378.382 71.9899 li
378.262 72.1101 li
377.062 72.1101 mo
377.062 72.11 li
376.942 71.9899 li
377.062 71.8701 li
377.182 71.9899 li
377.062 72.1101 li
375.862 72.1101 mo
375.862 72.11 li
375.742 71.9899 li
375.862 71.8701 li
375.982 71.9899 li
375.862 72.1101 li
374.662 72.1101 mo
374.662 72.11 li
374.542 71.9899 li
374.662 71.8701 li
374.782 71.9899 li
374.662 72.1101 li
373.462 72.1101 mo
373.462 72.11 li
373.341 71.9899 li
373.462 71.8701 li
373.582 71.9899 li
373.462 72.1101 li
372.262 72.1101 mo
372.262 72.11 li
372.142 71.9899 li
372.262 71.8701 li
372.382 71.9899 li
372.262 72.1101 li
371.062 72.1101 mo
371.062 72.11 li
370.942 71.9899 li
371.062 71.8701 li
371.182 71.9899 li
371.062 72.1101 li
369.862 72.1101 mo
369.862 72.11 li
369.742 71.9899 li
369.862 71.8701 li
369.982 71.9899 li
369.862 72.1101 li
368.662 72.1101 mo
368.662 72.11 li
368.542 71.9899 li
368.662 71.8701 li
368.782 71.9899 li
368.662 72.1101 li
367.461 72.1101 mo
367.461 72.11 li
367.341 71.9899 li
367.461 71.8701 li
367.582 71.9899 li
367.461 72.1101 li
366.261 72.1101 mo
366.261 72.11 li
366.141 71.9899 li
366.261 71.8701 li
366.382 71.9899 li
366.261 72.1101 li
365.062 72.1101 mo
365.062 72.11 li
364.942 71.9899 li
365.062 71.8701 li
365.182 71.9899 li
365.062 72.1101 li
363.862 72.1101 mo
363.862 72.11 li
363.742 71.9899 li
363.862 71.8701 li
363.982 71.9899 li
363.862 72.1101 li
362.662 72.1101 mo
362.662 72.11 li
362.542 71.9899 li
362.662 71.8701 li
362.782 71.9899 li
362.662 72.1101 li
361.461 72.1101 mo
361.461 72.11 li
361.341 71.9899 li
361.461 71.8701 li
361.582 71.9899 li
361.461 72.1101 li
360.262 72.1101 mo
360.262 72.11 li
360.141 71.9899 li
360.262 71.8701 li
360.381 71.9899 li
360.262 72.1101 li
359.062 72.1101 mo
359.062 72.11 li
358.942 71.9899 li
359.062 71.8701 li
359.182 71.9899 li
359.062 72.1101 li
357.862 72.1101 mo
357.862 72.11 li
357.742 71.9899 li
357.862 71.8701 li
357.982 71.9899 li
357.862 72.1101 li
356.661 72.1101 mo
356.661 72.11 li
356.542 71.9899 li
356.661 71.8701 li
356.782 71.9899 li
356.661 72.1101 li
355.462 72.1101 mo
355.462 72.11 li
355.341 71.9899 li
355.462 71.8701 li
355.581 71.9899 li
355.462 72.1101 li
354.262 72.1101 mo
354.262 72.11 li
354.142 71.9899 li
354.262 71.8701 li
354.381 71.9899 li
354.262 72.1101 li
353.062 72.1101 mo
353.062 72.11 li
352.942 71.9899 li
353.062 71.8701 li
353.182 71.9899 li
353.062 72.1101 li
351.862 72.1101 mo
351.862 72.11 li
351.742 71.9899 li
351.862 71.8701 li
351.982 71.9899 li
351.862 72.1101 li
350.661 72.1101 mo
350.661 72.11 li
350.541 71.9899 li
350.661 71.8701 li
350.782 71.9899 li
350.661 72.1101 li
349.462 72.1101 mo
349.462 72.11 li
349.342 71.9899 li
349.462 71.8701 li
349.581 71.9899 li
349.462 72.1101 li
348.262 72.1101 mo
348.262 72.11 li
348.142 71.9899 li
348.262 71.8701 li
348.382 71.9899 li
348.262 72.1101 li
347.062 72.1101 mo
347.062 72.11 li
346.942 71.9899 li
347.062 71.8701 li
347.182 71.9899 li
347.062 72.1101 li
/1 
[/DeviceCMYK] /CSA add_res
.750271 .679713 .654902 .901946 cmyk
f
345.862 72.1101 mo
345.862 72.11 li
345.741 71.9899 li
345.862 71.8701 li
345.982 71.9899 li
345.862 72.1101 li
344.661 72.1101 mo
344.661 72.11 li
344.541 71.9899 li
344.661 71.8701 li
344.781 71.9899 li
344.661 72.1101 li
343.461 72.1101 mo
343.461 72.11 li
343.341 71.9899 li
343.461 71.8701 li
343.581 71.9899 li
343.461 72.1101 li
342.262 72.1101 mo
342.262 72.11 li
342.142 71.9899 li
342.262 71.8701 li
342.382 71.9899 li
342.262 72.1101 li
341.062 72.1101 mo
341.062 72.11 li
340.942 71.9899 li
341.062 71.8701 li
341.182 71.9899 li
341.062 72.1101 li
339.862 72.1101 mo
339.862 72.11 li
339.741 71.9899 li
339.862 71.8701 li
339.982 71.9899 li
339.862 72.1101 li
338.661 72.1101 mo
338.661 72.11 li
338.541 71.9899 li
338.661 71.8701 li
338.781 71.9899 li
338.661 72.1101 li
337.462 72.1101 mo
337.462 72.11 li
337.341 71.9899 li
337.462 71.8701 li
337.581 71.9899 li
337.462 72.1101 li
336.262 72.1101 mo
336.262 72.11 li
336.142 71.9899 li
336.262 71.8701 li
336.382 71.9899 li
336.262 72.1101 li
335.062 72.1101 mo
335.062 72.11 li
334.941 71.9899 li
335.062 71.8701 li
335.182 71.9899 li
335.062 72.1101 li
333.861 72.1101 mo
333.861 72.11 li
333.741 71.9899 li
333.861 71.8701 li
333.982 71.9899 li
333.861 72.1101 li
332.661 72.1101 mo
332.661 72.11 li
332.541 71.9899 li
332.661 71.8701 li
332.781 71.9899 li
332.661 72.1101 li
331.462 72.1101 mo
331.462 72.11 li
331.342 71.9899 li
331.462 71.8701 li
331.581 71.9899 li
331.462 72.1101 li
330.262 72.1101 mo
330.262 72.11 li
330.142 71.9899 li
330.262 71.8701 li
330.382 71.9899 li
330.262 72.1101 li
329.062 72.1101 mo
329.062 72.11 li
328.941 71.9899 li
329.062 71.8701 li
329.182 71.9899 li
329.062 72.1101 li
327.861 72.1101 mo
327.861 72.11 li
327.741 71.9899 li
327.861 71.8701 li
327.982 71.9899 li
327.861 72.1101 li
326.661 72.1101 mo
326.661 72.11 li
326.541 71.9899 li
326.661 71.8701 li
326.781 71.9899 li
326.661 72.1101 li
325.461 72.1101 mo
325.461 72.11 li
325.341 71.9899 li
325.461 71.8701 li
325.581 71.9899 li
325.461 72.1101 li
324.262 72.1101 mo
324.262 72.11 li
324.142 71.9899 li
324.262 71.8701 li
324.382 71.9899 li
324.262 72.1101 li
323.061 72.1101 mo
323.061 72.11 li
322.941 71.9899 li
323.061 71.8701 li
323.182 71.9899 li
323.061 72.1101 li
321.861 72.1101 mo
321.861 72.11 li
321.741 71.9899 li
321.861 71.8701 li
321.981 71.9899 li
321.861 72.1101 li
320.662 72.1101 mo
320.662 72.11 li
320.542 71.9899 li
320.662 71.8701 li
320.781 71.9899 li
320.662 72.1101 li
319.462 72.1101 mo
319.462 72.11 li
319.342 71.9899 li
319.462 71.8701 li
319.582 71.9899 li
319.462 72.1101 li
318.262 72.1101 mo
318.262 72.11 li
318.142 71.9899 li
318.262 71.8701 li
318.382 71.9899 li
318.262 72.1101 li
317.061 72.1101 mo
317.061 72.11 li
316.941 71.9899 li
317.061 71.8701 li
317.182 71.9899 li
317.061 72.1101 li
315.862 72.1101 mo
315.862 72.11 li
315.742 71.9899 li
315.862 71.8701 li
315.981 71.9899 li
315.862 72.1101 li
314.662 72.1101 mo
314.662 72.11 li
314.542 71.9899 li
314.662 71.8701 li
314.782 71.9899 li
314.662 72.1101 li
313.462 72.1101 mo
313.462 72.11 li
313.342 71.9899 li
313.462 71.8701 li
313.582 71.9899 li
313.462 72.1101 li
312.262 72.1101 mo
312.262 72.11 li
312.141 71.9899 li
312.262 71.8701 li
312.382 71.9899 li
312.262 72.1101 li
311.062 72.1101 mo
311.062 72.11 li
310.941 71.9899 li
311.062 71.8701 li
311.181 71.9899 li
311.062 72.1101 li
309.862 72.1101 mo
309.862 72.11 li
309.742 71.9899 li
309.862 71.8701 li
309.982 71.9899 li
309.862 72.1101 li
308.662 72.1101 mo
308.662 72.11 li
308.542 71.9899 li
308.662 71.8701 li
308.782 71.9899 li
308.662 72.1101 li
307.462 72.1101 mo
307.462 72.11 li
307.342 71.9899 li
307.462 71.8701 li
307.582 71.9899 li
307.462 72.1101 li
306.262 72.1101 mo
306.262 72.11 li
306.142 71.9899 li
306.262 71.8701 li
306.382 71.9899 li
306.262 72.1101 li
305.062 72.1101 mo
305.062 72.11 li
304.942 71.9899 li
305.062 71.8701 li
305.182 71.9899 li
305.062 72.1101 li
303.862 72.1101 mo
303.862 72.11 li
303.742 71.9899 li
303.862 71.8701 li
303.982 71.9899 li
303.862 72.1101 li
302.662 72.1101 mo
302.662 72.11 li
302.542 71.9899 li
302.662 71.8701 li
302.782 71.9899 li
302.662 72.1101 li
301.462 72.1101 mo
301.462 72.11 li
301.342 71.9899 li
301.462 71.8701 li
301.582 71.9899 li
301.462 72.1101 li
300.262 72.1101 mo
300.262 72.11 li
300.142 71.9899 li
300.262 71.8701 li
300.382 71.9899 li
300.262 72.1101 li
299.062 72.1101 mo
299.062 72.11 li
298.942 71.9899 li
299.062 71.8701 li
299.182 71.9899 li
299.062 72.1101 li
297.862 72.1101 mo
297.862 72.11 li
297.742 71.9899 li
297.862 71.8701 li
297.982 71.9899 li
297.862 72.1101 li
296.662 72.1101 mo
296.662 72.11 li
296.542 71.9899 li
296.662 71.8701 li
296.782 71.9899 li
296.662 72.1101 li
295.462 72.1101 mo
295.462 72.11 li
295.342 71.9899 li
295.462 71.8701 li
295.582 71.9899 li
295.462 72.1101 li
294.262 72.1101 mo
294.262 72.11 li
294.142 71.9899 li
294.262 71.8701 li
294.382 71.9899 li
294.262 72.1101 li
293.062 72.1101 mo
293.062 72.11 li
292.942 71.9899 li
293.062 71.8701 li
293.182 71.9899 li
293.062 72.1101 li
291.862 72.1101 mo
291.862 72.11 li
291.742 71.9899 li
291.862 71.8701 li
291.982 71.9899 li
291.862 72.1101 li
290.662 72.1101 mo
290.662 72.11 li
290.542 71.9899 li
290.662 71.8701 li
290.782 71.9899 li
290.662 72.1101 li
289.462 72.1101 mo
289.462 72.11 li
289.342 71.9899 li
289.462 71.8701 li
289.582 71.9899 li
289.462 72.1101 li
288.262 72.1101 mo
288.262 72.11 li
288.142 71.9899 li
288.262 71.8701 li
288.382 71.9899 li
288.262 72.1101 li
287.062 72.1101 mo
287.062 72.11 li
286.942 71.9899 li
287.062 71.8701 li
287.182 71.9899 li
287.062 72.1101 li
285.862 72.1101 mo
285.862 72.11 li
285.742 71.9899 li
285.862 71.8701 li
285.982 71.9899 li
285.862 72.1101 li
284.662 72.1101 mo
284.662 72.11 li
284.542 71.9899 li
284.662 71.8701 li
284.782 71.9899 li
284.662 72.1101 li
283.462 72.1101 mo
283.462 72.11 li
283.342 71.9899 li
283.462 71.8701 li
283.582 71.9899 li
283.462 72.1101 li
282.262 72.1101 mo
282.262 72.11 li
282.142 71.9899 li
282.262 71.8701 li
282.382 71.9899 li
282.262 72.1101 li
281.062 72.1101 mo
281.062 72.11 li
280.942 71.9899 li
281.062 71.8701 li
281.182 71.9899 li
281.062 72.1101 li
279.862 72.1101 mo
279.862 72.11 li
279.742 71.9899 li
279.862 71.8701 li
279.982 71.9899 li
279.862 72.1101 li
278.662 72.1101 mo
278.662 72.11 li
278.542 71.9899 li
278.662 71.8701 li
278.782 71.9899 li
278.662 72.1101 li
277.462 72.1101 mo
277.462 72.11 li
277.342 71.9899 li
277.462 71.8701 li
277.582 71.9899 li
277.462 72.1101 li
276.262 72.1101 mo
276.262 72.11 li
276.142 71.9899 li
276.262 71.8701 li
276.382 71.9899 li
276.262 72.1101 li
275.062 72.1101 mo
275.062 72.11 li
274.942 71.9899 li
275.062 71.8701 li
275.182 71.9899 li
275.062 72.1101 li
273.862 72.1101 mo
273.862 72.11 li
273.742 71.9899 li
273.862 71.8701 li
273.982 71.9899 li
273.862 72.1101 li
272.662 72.1101 mo
272.662 72.11 li
272.542 71.9899 li
272.662 71.8701 li
272.782 71.9899 li
272.662 72.1101 li
271.462 72.1101 mo
271.462 72.11 li
271.342 71.9899 li
271.462 71.8701 li
271.582 71.9899 li
271.462 72.1101 li
264.262 72.1101 mo
264.262 72.11 li
264.142 71.9899 li
264.262 71.8701 li
264.382 71.9899 li
264.262 72.1101 li
263.062 72.1101 mo
263.062 72.11 li
262.942 71.9899 li
263.062 71.8701 li
263.182 71.9899 li
263.062 72.1101 li
261.862 72.1101 mo
261.862 72.11 li
261.742 71.9899 li
261.862 71.8701 li
261.982 71.9899 li
261.862 72.1101 li
260.662 72.1101 mo
260.662 72.11 li
260.542 71.9899 li
260.662 71.8701 li
260.782 71.9899 li
260.662 72.1101 li
259.462 72.1101 mo
259.462 72.11 li
259.342 71.9899 li
259.462 71.8701 li
259.582 71.9899 li
259.462 72.1101 li
258.262 72.1101 mo
258.262 72.11 li
258.142 71.9899 li
258.262 71.8701 li
258.382 71.9899 li
258.262 72.1101 li
257.062 72.1101 mo
257.062 72.11 li
256.942 71.9899 li
257.062 71.8701 li
257.182 71.9899 li
257.062 72.1101 li
255.862 72.1101 mo
255.862 72.11 li
255.742 71.9899 li
255.862 71.8701 li
255.982 71.9899 li
255.862 72.1101 li
254.662 72.1101 mo
254.662 72.11 li
254.542 71.9899 li
254.662 71.8701 li
254.782 71.9899 li
254.662 72.1101 li
253.462 72.1101 mo
253.462 72.11 li
253.342 71.9899 li
253.462 71.8701 li
253.582 71.9899 li
253.462 72.1101 li
252.262 72.1101 mo
252.262 72.11 li
252.142 71.9899 li
252.262 71.8701 li
252.382 71.9899 li
252.262 72.1101 li
251.062 72.1101 mo
251.062 72.11 li
250.942 71.9899 li
251.062 71.8701 li
251.182 71.9899 li
251.062 72.1101 li
249.862 72.1101 mo
249.862 72.11 li
249.742 71.9899 li
249.862 71.8701 li
249.982 71.9899 li
249.862 72.1101 li
248.662 72.1101 mo
248.662 72.11 li
248.542 71.9899 li
248.662 71.8701 li
248.782 71.9899 li
248.662 72.1101 li
247.462 72.1101 mo
247.462 72.11 li
247.342 71.9899 li
247.462 71.8701 li
247.582 71.9899 li
247.462 72.1101 li
246.262 72.1101 mo
246.262 72.11 li
246.142 71.9899 li
246.262 71.8701 li
246.382 71.9899 li
246.262 72.1101 li
245.062 72.1101 mo
245.062 72.11 li
244.942 71.9899 li
245.062 71.8701 li
245.182 71.9899 li
245.062 72.1101 li
243.862 72.1101 mo
243.862 72.11 li
243.742 71.9899 li
243.862 71.8701 li
243.982 71.9899 li
243.862 72.1101 li
242.662 72.1101 mo
242.662 72.11 li
242.542 71.9899 li
242.662 71.8701 li
242.782 71.9899 li
242.662 72.1101 li
241.462 72.1101 mo
241.462 72.11 li
241.342 71.9899 li
241.462 71.8701 li
241.582 71.9899 li
241.462 72.1101 li
240.262 72.1101 mo
240.262 72.11 li
240.142 71.9899 li
240.262 71.8701 li
240.382 71.9899 li
240.262 72.1101 li
239.062 72.1101 mo
239.062 72.11 li
238.942 71.9899 li
239.062 71.8701 li
239.182 71.9899 li
239.062 72.1101 li
237.862 72.1101 mo
237.862 72.11 li
237.742 71.9899 li
237.862 71.8701 li
237.982 71.9899 li
237.862 72.1101 li
236.662 72.1101 mo
236.662 72.11 li
236.542 71.9899 li
236.662 71.8701 li
236.782 71.9899 li
236.662 72.1101 li
235.462 72.1101 mo
235.462 72.11 li
235.342 71.9899 li
235.462 71.8701 li
235.582 71.9899 li
235.462 72.1101 li
234.262 72.1101 mo
234.262 72.11 li
234.142 71.9899 li
234.262 71.8701 li
234.382 71.9899 li
234.262 72.1101 li
233.062 72.1101 mo
233.062 72.11 li
232.942 71.9899 li
233.062 71.8701 li
233.182 71.9899 li
233.062 72.1101 li
231.862 72.1101 mo
231.862 72.11 li
231.742 71.9899 li
231.862 71.8701 li
231.982 71.9899 li
231.862 72.1101 li
230.662 72.1101 mo
230.662 72.11 li
230.542 71.9899 li
230.662 71.8701 li
230.782 71.9899 li
230.662 72.1101 li
229.462 72.1101 mo
229.462 72.11 li
229.342 71.9899 li
229.462 71.8701 li
229.582 71.9899 li
229.462 72.1101 li
228.262 72.1101 mo
228.262 72.11 li
228.142 71.9899 li
228.262 71.8701 li
228.382 71.9899 li
228.262 72.1101 li
227.062 72.1101 mo
227.062 72.11 li
226.942 71.9899 li
227.062 71.8701 li
227.182 71.9899 li
227.062 72.1101 li
225.862 72.1101 mo
225.862 72.11 li
225.742 71.9899 li
225.862 71.8701 li
225.982 71.9899 li
225.862 72.1101 li
224.662 72.1101 mo
224.662 72.11 li
224.542 71.9899 li
224.662 71.8701 li
224.782 71.9899 li
224.662 72.1101 li
223.462 72.1101 mo
223.462 72.11 li
223.342 71.9899 li
223.462 71.8701 li
223.582 71.9899 li
223.462 72.1101 li
222.262 72.1101 mo
222.262 72.11 li
222.142 71.9899 li
222.262 71.8701 li
222.382 71.9899 li
222.262 72.1101 li
221.062 72.1101 mo
221.062 72.11 li
220.942 71.9899 li
221.062 71.8701 li
221.182 71.9899 li
221.062 72.1101 li
219.862 72.1101 mo
219.862 72.11 li
219.742 71.9899 li
219.862 71.8701 li
219.982 71.9899 li
219.862 72.1101 li
218.662 72.1101 mo
218.662 72.11 li
218.542 71.9899 li
218.662 71.8701 li
218.782 71.9899 li
218.662 72.1101 li
217.462 72.1101 mo
217.462 72.11 li
217.342 71.9899 li
217.462 71.8701 li
217.582 71.9899 li
217.462 72.1101 li
216.262 72.1101 mo
216.262 72.11 li
216.142 71.9899 li
216.262 71.8701 li
216.382 71.9899 li
216.262 72.1101 li
215.062 72.1101 mo
215.062 72.11 li
214.942 71.9899 li
215.062 71.8701 li
215.182 71.9899 li
215.062 72.1101 li
213.862 72.1101 mo
213.862 72.11 li
213.742 71.9899 li
213.862 71.8701 li
213.982 71.9899 li
213.862 72.1101 li
212.662 72.1101 mo
212.662 72.11 li
212.542 71.9899 li
212.662 71.8701 li
212.782 71.9899 li
212.662 72.1101 li
211.462 72.1101 mo
211.462 72.11 li
211.342 71.9899 li
211.462 71.8701 li
211.582 71.9899 li
211.462 72.1101 li
210.262 72.1101 mo
210.262 72.11 li
210.142 71.9899 li
210.262 71.8701 li
210.382 71.9899 li
210.262 72.1101 li
209.062 72.1101 mo
209.062 72.11 li
208.942 71.9899 li
209.062 71.8701 li
209.182 71.9899 li
209.062 72.1101 li
207.862 72.1101 mo
207.862 72.11 li
207.742 71.9899 li
207.862 71.8701 li
207.982 71.9899 li
207.862 72.1101 li
206.662 72.1101 mo
206.662 72.11 li
206.542 71.9899 li
206.662 71.8701 li
206.782 71.9899 li
206.662 72.1101 li
205.462 72.1101 mo
205.462 72.11 li
205.342 71.9899 li
205.462 71.8701 li
205.582 71.9899 li
205.462 72.1101 li
204.262 72.1101 mo
204.262 72.11 li
204.142 71.9899 li
204.262 71.8701 li
204.382 71.9899 li
204.262 72.1101 li
203.062 72.1101 mo
203.062 72.11 li
202.942 71.9899 li
203.062 71.8701 li
203.182 71.9899 li
203.062 72.1101 li
201.862 72.1101 mo
201.862 72.11 li
201.742 71.9899 li
201.862 71.8701 li
201.982 71.9899 li
201.862 72.1101 li
200.662 72.1101 mo
200.662 72.11 li
200.542 71.9899 li
200.662 71.8701 li
200.782 71.9899 li
200.662 72.1101 li
199.462 72.1101 mo
199.462 72.11 li
199.342 71.9899 li
199.462 71.8701 li
199.582 71.9899 li
199.462 72.1101 li
198.262 72.1101 mo
198.262 72.11 li
198.142 71.9899 li
198.262 71.8701 li
198.382 71.9899 li
198.262 72.1101 li
197.062 72.1101 mo
197.062 72.11 li
196.942 71.9899 li
197.062 71.8701 li
197.182 71.9899 li
197.062 72.1101 li
195.862 72.1101 mo
195.862 72.11 li
195.742 71.9899 li
195.862 71.8701 li
195.982 71.9899 li
195.862 72.1101 li
194.662 72.1101 mo
194.662 72.11 li
194.542 71.9899 li
194.662 71.8701 li
194.782 71.9899 li
194.662 72.1101 li
193.462 72.1101 mo
193.462 72.11 li
193.342 71.9899 li
193.462 71.8701 li
193.582 71.9899 li
193.462 72.1101 li
192.262 72.1101 mo
192.262 72.11 li
192.142 71.9899 li
192.262 71.8701 li
192.382 71.9899 li
192.262 72.1101 li
191.062 72.1101 mo
191.062 72.11 li
190.942 71.9899 li
191.062 71.8701 li
191.182 71.9899 li
191.062 72.1101 li
189.862 72.1101 mo
189.862 72.11 li
189.742 71.9899 li
189.862 71.8701 li
189.982 71.9899 li
189.862 72.1101 li
188.662 72.1101 mo
188.662 72.11 li
188.542 71.9899 li
188.662 71.8701 li
188.782 71.9899 li
188.662 72.1101 li
187.462 72.1101 mo
187.462 72.11 li
187.342 71.9899 li
187.462 71.8701 li
187.582 71.9899 li
187.462 72.1101 li
186.262 72.1101 mo
186.262 72.11 li
186.142 71.9899 li
186.262 71.8701 li
186.382 71.9899 li
186.262 72.1101 li
185.062 72.1101 mo
185.062 72.11 li
184.942 71.9899 li
185.062 71.8701 li
185.182 71.9899 li
185.062 72.1101 li
183.862 72.1101 mo
183.862 72.11 li
183.742 71.9899 li
183.862 71.8701 li
183.982 71.9899 li
183.862 72.1101 li
182.662 72.1101 mo
182.662 72.11 li
182.542 71.9899 li
182.662 71.8701 li
182.782 71.9899 li
182.662 72.1101 li
181.462 72.1101 mo
181.462 72.11 li
181.342 71.9899 li
181.462 71.8701 li
181.582 71.9899 li
181.462 72.1101 li
180.262 72.1101 mo
180.262 72.11 li
180.142 71.9899 li
180.262 71.8701 li
180.382 71.9899 li
180.262 72.1101 li
179.062 72.1101 mo
179.062 72.11 li
178.942 71.9899 li
179.062 71.8701 li
179.182 71.9899 li
179.062 72.1101 li
177.862 72.1101 mo
177.862 72.11 li
177.742 71.9899 li
177.862 71.8701 li
177.982 71.9899 li
177.862 72.1101 li
176.662 72.1101 mo
176.662 72.11 li
176.542 71.9899 li
176.662 71.8701 li
176.782 71.9899 li
176.662 72.1101 li
175.462 72.1101 mo
175.462 72.11 li
175.342 71.9899 li
175.462 71.8701 li
175.582 71.9899 li
175.462 72.1101 li
174.262 72.1101 mo
174.262 72.11 li
174.142 71.9899 li
174.262 71.8701 li
174.382 71.9899 li
174.262 72.1101 li
173.062 72.1101 mo
173.062 72.11 li
172.942 71.9899 li
173.062 71.8701 li
173.182 71.9899 li
173.062 72.1101 li
171.862 72.1101 mo
171.862 72.11 li
171.742 71.9899 li
171.862 71.8701 li
171.982 71.9899 li
171.862 72.1101 li
170.662 72.1101 mo
170.662 72.11 li
170.542 71.9899 li
170.662 71.8701 li
170.782 71.9899 li
170.662 72.1101 li
169.462 72.1101 mo
169.462 72.11 li
169.342 71.9899 li
169.462 71.8701 li
169.582 71.9899 li
169.462 72.1101 li
168.262 72.1101 mo
168.262 72.11 li
168.142 71.9899 li
168.262 71.8701 li
168.382 71.9899 li
168.262 72.1101 li
167.062 72.1101 mo
167.062 72.11 li
166.942 71.9899 li
167.062 71.8701 li
167.182 71.9899 li
167.062 72.1101 li
165.862 72.1101 mo
165.862 72.11 li
165.742 71.9899 li
165.862 71.8701 li
165.982 71.9899 li
165.862 72.1101 li
164.662 72.1101 mo
164.662 72.11 li
164.542 71.9899 li
164.662 71.8701 li
164.782 71.9899 li
164.662 72.1101 li
163.462 72.1101 mo
163.462 72.11 li
163.342 71.9899 li
163.462 71.8701 li
163.582 71.9899 li
163.462 72.1101 li
162.262 72.1101 mo
162.262 72.11 li
162.142 71.9899 li
162.262 71.8701 li
162.382 71.9899 li
162.262 72.1101 li
161.062 72.1101 mo
161.062 72.11 li
160.942 71.9899 li
161.062 71.8701 li
161.182 71.9899 li
161.062 72.1101 li
159.862 72.1101 mo
159.862 72.11 li
159.742 71.9899 li
159.862 71.8701 li
159.982 71.9899 li
159.862 72.1101 li
158.662 72.1101 mo
158.662 72.11 li
158.542 71.9899 li
158.662 71.8701 li
158.782 71.9899 li
158.662 72.1101 li
157.462 72.1101 mo
157.462 72.11 li
157.342 71.9899 li
157.462 71.8701 li
157.582 71.9899 li
157.462 72.1101 li
156.262 72.1101 mo
156.262 72.11 li
156.142 71.9899 li
156.262 71.8701 li
156.382 71.9899 li
156.262 72.1101 li
155.062 72.1101 mo
155.062 72.11 li
154.942 71.9899 li
155.062 71.8701 li
155.182 71.9899 li
155.062 72.1101 li
153.862 72.1101 mo
153.862 72.11 li
153.742 71.9899 li
153.862 71.8701 li
153.982 71.9899 li
153.862 72.1101 li
152.662 72.1101 mo
152.662 72.11 li
152.542 71.9899 li
152.662 71.8701 li
152.782 71.9899 li
152.662 72.1101 li
151.462 72.1101 mo
151.462 72.11 li
151.342 71.9899 li
151.462 71.8701 li
151.582 71.9899 li
151.462 72.1101 li
150.262 72.1101 mo
150.262 72.11 li
150.142 71.9899 li
150.262 71.8701 li
150.382 71.9899 li
150.262 72.1101 li
149.062 72.1101 mo
149.062 72.11 li
148.942 71.9899 li
149.062 71.8701 li
149.182 71.9899 li
149.062 72.1101 li
147.862 72.1101 mo
147.862 72.11 li
147.742 71.9899 li
147.862 71.8701 li
147.982 71.9899 li
147.862 72.1101 li
146.662 72.1101 mo
146.662 72.11 li
146.542 71.9899 li
146.662 71.8701 li
146.782 71.9899 li
146.662 72.1101 li
145.462 72.1101 mo
145.462 72.11 li
145.342 71.9899 li
145.462 71.8701 li
145.582 71.9899 li
145.462 72.1101 li
144.262 72.1101 mo
144.262 72.11 li
144.142 71.9899 li
144.262 71.8701 li
144.382 71.9899 li
144.262 72.1101 li
143.062 72.1101 mo
143.062 72.11 li
142.942 71.9899 li
143.062 71.8701 li
143.182 71.9899 li
143.062 72.1101 li
141.862 72.1101 mo
141.862 72.11 li
141.742 71.9899 li
141.862 71.8701 li
141.982 71.9899 li
141.862 72.1101 li
140.662 72.1101 mo
140.662 72.11 li
140.542 71.9899 li
140.662 71.8701 li
140.782 71.9899 li
140.662 72.1101 li
139.462 72.1101 mo
139.462 72.11 li
139.342 71.9899 li
139.462 71.8701 li
139.582 71.9899 li
139.462 72.1101 li
138.262 72.1101 mo
138.262 72.11 li
138.142 71.9899 li
138.262 71.8701 li
138.382 71.9899 li
138.262 72.1101 li
137.062 72.1101 mo
137.062 72.11 li
136.942 71.9899 li
137.062 71.8701 li
137.182 71.9899 li
137.062 72.1101 li
135.862 72.1101 mo
135.862 72.11 li
135.742 71.9899 li
135.862 71.8701 li
135.982 71.9899 li
135.862 72.1101 li
134.662 72.1101 mo
134.662 72.11 li
134.542 71.9899 li
134.662 71.8701 li
134.782 71.9899 li
134.662 72.1101 li
133.462 72.1101 mo
133.462 72.11 li
133.342 71.9899 li
133.462 71.8701 li
133.582 71.9899 li
133.462 72.1101 li
132.262 72.1101 mo
132.262 72.11 li
132.142 71.9899 li
132.262 71.8701 li
132.382 71.9899 li
132.262 72.1101 li
131.062 72.1101 mo
131.062 72.11 li
130.942 71.9899 li
131.062 71.8701 li
131.182 71.9899 li
131.062 72.1101 li
129.862 72.1101 mo
129.862 72.11 li
129.742 71.9899 li
129.862 71.8701 li
129.982 71.9899 li
129.862 72.1101 li
128.662 72.1101 mo
128.662 72.11 li
128.542 71.9899 li
128.662 71.8701 li
128.782 71.9899 li
128.662 72.1101 li
127.462 72.1101 mo
127.462 72.11 li
127.342 71.9899 li
127.462 71.8701 li
127.582 71.9899 li
127.462 72.1101 li
126.262 72.1101 mo
126.262 72.11 li
126.142 71.9899 li
126.262 71.8701 li
126.382 71.9899 li
126.262 72.1101 li
125.062 72.1101 mo
125.062 72.11 li
124.942 71.9899 li
125.062 71.8701 li
125.182 71.9899 li
125.062 72.1101 li
123.862 72.1101 mo
123.862 72.11 li
123.742 71.9899 li
123.862 71.8701 li
123.982 71.9899 li
123.862 72.1101 li
122.662 72.1101 mo
122.662 72.11 li
122.542 71.9899 li
122.662 71.8701 li
122.782 71.9899 li
122.662 72.1101 li
121.462 72.1101 mo
121.462 72.11 li
121.342 71.9899 li
121.462 71.8701 li
121.582 71.9899 li
121.462 72.1101 li
120.262 72.1101 mo
120.262 72.11 li
120.142 71.9899 li
120.262 71.8701 li
120.382 71.9899 li
120.262 72.1101 li
119.062 72.1101 mo
119.062 72.11 li
118.942 71.9899 li
119.062 71.8701 li
119.182 71.9899 li
119.062 72.1101 li
117.862 72.1101 mo
117.862 72.11 li
117.742 71.9899 li
117.862 71.8701 li
117.982 71.9899 li
117.862 72.1101 li
116.662 72.1101 mo
116.662 72.11 li
116.542 71.9899 li
116.662 71.8701 li
116.782 71.9899 li
116.662 72.1101 li
115.462 72.1101 mo
115.462 72.11 li
115.342 71.9899 li
115.462 71.8701 li
115.582 71.9899 li
115.462 72.1101 li
114.262 72.1101 mo
114.262 72.11 li
114.142 71.9899 li
114.262 71.8701 li
114.382 71.9899 li
114.262 72.1101 li
113.062 72.1101 mo
113.062 72.11 li
112.942 71.9899 li
113.062 71.8701 li
113.182 71.9899 li
113.062 72.1101 li
111.862 72.1101 mo
111.862 72.11 li
111.742 71.9899 li
111.862 71.8701 li
111.982 71.9899 li
111.862 72.1101 li
110.662 72.1101 mo
110.662 72.11 li
110.542 71.9899 li
110.662 71.8701 li
110.782 71.9899 li
110.662 72.1101 li
109.462 72.1101 mo
109.462 72.11 li
109.342 71.9899 li
109.462 71.8701 li
109.582 71.9899 li
109.462 72.1101 li
108.262 72.1101 mo
108.262 72.11 li
108.142 71.9899 li
108.262 71.8701 li
108.382 71.9899 li
108.262 72.1101 li
107.062 72.1101 mo
107.062 72.11 li
106.942 71.9899 li
107.062 71.8701 li
107.182 71.9899 li
107.062 72.1101 li
105.862 72.1101 mo
105.862 72.11 li
105.742 71.9899 li
105.862 71.8701 li
105.982 71.9899 li
105.862 72.1101 li
104.662 72.1101 mo
104.662 72.11 li
104.542 71.9899 li
104.662 71.8701 li
104.782 71.9899 li
104.662 72.1101 li
103.462 72.1101 mo
103.462 72.11 li
103.342 71.9899 li
103.462 71.8701 li
103.582 71.9899 li
103.462 72.1101 li
102.262 72.1101 mo
102.262 72.11 li
102.142 71.9899 li
102.262 71.8701 li
102.382 71.9899 li
102.262 72.1101 li
101.062 72.1101 mo
101.062 72.11 li
100.942 71.9899 li
101.062 71.8701 li
101.182 71.9899 li
101.062 72.1101 li
99.8625 72.1101 mo
99.8625 72.11 li
99.7425 71.9899 li
99.8625 71.8701 li
99.9824 71.9899 li
99.8625 72.1101 li
98.6624 72.1101 mo
98.6624 72.11 li
98.5424 71.9899 li
98.6624 71.8701 li
98.7825 71.9899 li
98.6624 72.1101 li
97.4624 72.1101 mo
97.4624 72.11 li
97.3424 71.9899 li
97.4624 71.8701 li
97.5824 71.9899 li
97.4624 72.1101 li
96.2624 72.1101 mo
96.2624 72.11 li
96.1424 71.9899 li
96.2624 71.8701 li
96.3824 71.9899 li
96.2624 72.1101 li
95.0625 72.1101 mo
95.0625 72.11 li
94.9425 71.9899 li
95.0625 71.8701 li
95.1824 71.9899 li
95.0625 72.1101 li
93.8625 72.1101 mo
93.8625 72.11 li
93.7424 71.9899 li
93.8625 71.8701 li
93.9825 71.9899 li
93.8625 72.1101 li
92.6624 72.1101 mo
92.6624 72.11 li
92.5424 71.9899 li
92.6624 71.8701 li
92.7825 71.9899 li
92.6624 72.1101 li
91.4624 72.1101 mo
91.4624 72.11 li
91.3424 71.9899 li
91.4624 71.8701 li
91.5824 71.9899 li
91.4624 72.1101 li
90.2625 72.1101 mo
90.2625 72.11 li
90.1425 71.9899 li
90.2625 71.8701 li
90.3825 71.9899 li
90.2625 72.1101 li
89.0625 72.1101 mo
89.0625 72.11 li
88.9425 71.9899 li
89.0625 71.8701 li
89.1825 71.9899 li
89.0625 72.1101 li
87.8625 72.1101 mo
87.8625 72.11 li
87.7424 71.9899 li
87.8625 71.8701 li
87.9825 71.9899 li
87.8625 72.1101 li
86.6624 72.1101 mo
86.6624 72.11 li
86.5424 71.9899 li
86.6624 71.8701 li
86.7824 71.9899 li
86.6624 72.1101 li
85.4625 72.1101 mo
85.4625 72.11 li
85.3425 71.9899 li
85.4625 71.8701 li
85.5826 71.9899 li
85.4625 72.1101 li
84.2625 72.1101 mo
84.2625 72.11 li
84.1425 71.9899 li
84.2625 71.8701 li
84.3825 71.9899 li
84.2625 72.1101 li
83.0625 72.1101 mo
83.0625 72.11 li
82.9425 71.9899 li
83.0625 71.8701 li
83.1825 71.9899 li
83.0625 72.1101 li
81.8626 72.1101 mo
81.8626 72.11 li
81.7426 71.9899 li
81.8626 71.8701 li
81.9825 71.9899 li
81.8626 72.1101 li
80.6626 72.1101 mo
80.6626 72.11 li
80.5425 71.9899 li
80.6626 71.8701 li
80.7826 71.9899 li
80.6626 72.1101 li
79.4625 72.1101 mo
79.4625 72.11 li
79.3425 71.9899 li
79.4625 71.8701 li
79.5825 71.9899 li
79.4625 72.1101 li
78.2625 72.1101 mo
78.2625 72.11 li
78.1425 71.9899 li
78.2625 71.8701 li
78.3825 71.9899 li
78.2625 72.1101 li
77.0626 72.1101 mo
77.0626 72.11 li
76.9426 71.9899 li
77.0626 71.8701 li
77.1825 71.9899 li
77.0626 72.1101 li
75.8626 72.1101 mo
75.8626 72.11 li
75.7426 71.9899 li
75.8626 71.8701 li
75.9825 71.9899 li
75.8626 72.1101 li
74.6625 72.1101 mo
74.6625 72.11 li
74.5425 71.9899 li
74.6625 71.8701 li
74.7825 71.9899 li
74.6625 72.1101 li
73.4625 72.1101 mo
73.4625 72.11 li
73.3425 71.9899 li
73.4625 71.8701 li
73.5825 71.9899 li
73.4625 72.1101 li
72.2625 72.1101 mo
72.2625 72.11 li
72.1426 71.9899 li
72.2625 71.8701 li
72.3825 71.9899 li
72.2625 72.1101 li
71.0626 72.1101 mo
71.0626 72.11 li
70.9426 71.9899 li
71.0626 71.8701 li
71.1826 71.9899 li
71.0626 72.1101 li
69.8625 72.1101 mo
69.8625 72.11 li
69.7425 71.9899 li
69.8625 71.8701 li
69.9826 71.9899 li
69.8625 72.1101 li
68.6625 72.1101 mo
68.6625 72.11 li
68.5425 71.9899 li
68.6625 71.8701 li
68.7825 71.9899 li
68.6625 72.1101 li
67.4625 72.1101 mo
67.4625 72.11 li
67.3425 71.9899 li
67.4625 71.8701 li
67.5825 71.9899 li
67.4625 72.1101 li
66.2626 72.1101 mo
66.2626 72.11 li
66.1426 71.9899 li
66.2626 71.8701 li
66.3826 71.9899 li
66.2626 72.1101 li
65.0626 72.1101 mo
65.0626 72.11 li
64.9426 71.9899 li
65.0626 71.8701 li
65.1826 71.9899 li
65.0626 72.1101 li
63.8625 72.1101 mo
63.8625 72.11 li
63.7425 71.9899 li
63.8625 71.8701 li
63.9826 71.9899 li
63.8625 72.1101 li
62.6626 72.1101 mo
62.6626 72.11 li
62.5426 71.9899 li
62.6626 71.8701 li
62.7825 71.9899 li
62.6626 72.1101 li
61.4626 72.1101 mo
61.4626 72.11 li
61.3426 71.9899 li
61.4626 71.8701 li
61.5826 71.9899 li
61.4626 72.1101 li
60.2626 72.1101 mo
60.2626 72.11 li
60.1426 71.9899 li
60.2626 71.8701 li
60.3826 71.9899 li
60.2626 72.1101 li
59.0626 72.1101 mo
59.0626 72.11 li
58.9425 71.9899 li
59.0626 71.8701 li
59.1826 71.9899 li
59.0626 72.1101 li
57.8627 72.1101 mo
57.8627 72.11 li
57.7426 71.9899 li
57.8627 71.8701 li
57.9826 71.9899 li
57.8627 72.1101 li
56.6626 72.1101 mo
56.6626 72.11 li
56.5426 71.9899 li
56.6626 71.8701 li
56.7826 71.9899 li
56.6626 72.1101 li
55.4626 72.1101 mo
55.4626 72.11 li
55.3426 71.9899 li
55.4626 71.8701 li
55.5826 71.9899 li
55.4626 72.1101 li
54.2626 72.1101 mo
54.2626 72.11 li
54.1426 71.9899 li
54.2626 71.8701 li
54.3826 71.9899 li
54.2626 72.1101 li
53.0627 72.1101 mo
53.0627 72.11 li
52.9427 71.9899 li
53.0627 71.8701 li
53.1826 71.9899 li
53.0627 72.1101 li
51.8626 72.1101 mo
51.8626 72.11 li
51.7426 71.9899 li
51.8626 71.8701 li
51.9827 71.9899 li
51.8626 72.1101 li
50.6626 72.1101 mo
50.6626 72.11 li
50.5426 71.9899 li
50.6626 71.8701 li
50.7826 71.9899 li
50.6626 72.1101 li
49.4626 72.1101 mo
49.4626 72.11 li
49.3427 71.9899 li
49.4626 71.8701 li
49.5826 71.9899 li
49.4626 72.1101 li
48.2627 72.1101 mo
48.2627 72.11 li
48.1427 71.9899 li
48.2627 71.8701 li
48.3826 71.9899 li
48.2627 72.1101 li
47.0627 72.1101 mo
47.0627 72.11 li
46.9426 71.9899 li
47.0627 71.8701 li
47.1827 71.9899 li
47.0627 72.1101 li
45.8626 72.1101 mo
45.8626 72.11 li
45.7426 71.9899 li
45.8626 71.8701 li
45.9827 71.9899 li
45.8626 72.1101 li
44.6626 72.1101 mo
44.6626 72.11 li
44.5426 71.9899 li
44.6626 71.8701 li
44.7826 71.9899 li
44.6626 72.1101 li
43.4627 72.1101 mo
43.4627 72.11 li
43.3427 71.9899 li
43.4627 71.8701 li
43.5827 71.9899 li
43.4627 72.1101 li
42.2627 72.1101 mo
42.2627 72.11 li
42.1427 71.9899 li
42.2627 71.8701 li
42.3827 71.9899 li
42.2627 72.1101 li
41.0627 72.1101 mo
41.0627 72.11 li
40.9426 71.9899 li
41.0627 71.8701 li
41.1827 71.9899 li
41.0627 72.1101 li
39.8626 72.1101 mo
39.8626 72.11 li
39.7426 71.9899 li
39.8626 71.8701 li
39.9826 71.9899 li
39.8626 72.1101 li
38.6627 72.1101 mo
38.6627 72.11 li
38.5427 71.9899 li
38.6627 71.8701 li
38.7827 71.9899 li
38.6627 72.1101 li
37.4627 72.1101 mo
37.4627 72.11 li
37.3427 71.9899 li
37.4627 71.8701 li
37.5827 71.9899 li
37.4627 72.1101 li
36.2627 72.1101 mo
36.2627 72.11 li
36.1427 71.9899 li
36.2627 71.8701 li
36.3827 71.9899 li
36.2627 72.1101 li
35.0626 72.1101 mo
35.0626 72.11 li
34.9426 71.9899 li
35.0626 71.8701 li
35.1827 71.9899 li
35.0626 72.1101 li
33.8627 72.1101 mo
33.8627 72.11 li
33.7427 71.9899 li
33.8627 71.8701 li
33.9826 71.9899 li
33.8627 72.1101 li
32.6627 72.1101 mo
32.6627 72.11 li
32.5427 71.9899 li
32.6627 71.8701 li
32.7827 71.9899 li
32.6627 72.1101 li
31.4627 72.1101 mo
31.4627 72.11 li
31.3427 71.9899 li
31.4627 71.8701 li
31.5827 71.9899 li
31.4627 72.1101 li
30.2628 72.1101 mo
30.2628 72.11 li
30.1428 71.9899 li
30.2628 71.8701 li
30.3827 71.9899 li
30.2628 72.1101 li
29.0628 72.1101 mo
29.0628 72.11 li
28.9427 71.9899 li
29.0628 71.8701 li
29.1826 71.9899 li
29.0628 72.1101 li
27.8627 72.1101 mo
27.8627 72.11 li
27.7427 71.9899 li
27.8627 71.8701 li
27.9827 71.9899 li
27.8627 72.1101 li
26.6627 72.1101 mo
26.6627 72.11 li
26.5427 71.9899 li
26.6627 71.8701 li
26.7827 71.9899 li
26.6627 72.1101 li
25.4627 72.1101 mo
25.4627 72.11 li
25.3428 71.9899 li
25.4627 71.8701 li
25.5827 71.9899 li
25.4627 72.1101 li
24.2628 72.1101 mo
24.2628 72.11 li
24.1428 71.9899 li
24.2628 71.8701 li
24.3828 71.9899 li
24.2628 72.1101 li
23.0628 72.1101 mo
23.0628 72.11 li
22.9427 71.9899 li
23.0628 71.8701 li
23.1828 71.9899 li
23.0628 72.1101 li
21.8627 72.1101 mo
21.8627 72.11 li
21.7427 71.9899 li
21.8627 71.8701 li
21.9827 71.9899 li
21.8627 72.1101 li
20.6627 72.1101 mo
20.6627 72.11 li
20.5428 71.9899 li
20.6627 71.8701 li
20.7827 71.9899 li
20.6627 72.1101 li
19.4628 72.1101 mo
19.4628 72.11 li
19.3428 71.9899 li
19.4628 71.8701 li
19.5828 71.9899 li
19.4628 72.1101 li
18.2628 72.1101 mo
18.2628 72.11 li
18.1428 71.9899 li
18.2628 71.8701 li
18.3828 71.9899 li
18.2628 72.1101 li
17.0627 72.1101 mo
17.0627 72.11 li
16.9427 71.9899 li
17.0627 71.8701 li
17.1828 71.9899 li
17.0627 72.1101 li
15.8627 72.1101 mo
15.8627 72.11 li
15.7427 71.9899 li
15.8627 71.8701 li
15.9827 71.9899 li
15.8627 72.1101 li
14.6628 72.1101 mo
14.6628 72.11 li
14.5428 71.9899 li
14.6628 71.8701 li
14.7828 71.9899 li
14.6628 72.1101 li
13.4628 72.1101 mo
13.4628 72.11 li
13.3428 71.9899 li
13.4628 71.8701 li
13.5828 71.9899 li
13.4628 72.1101 li
12.2628 72.1101 mo
12.2628 72.11 li
12.1427 71.9899 li
12.2628 71.8701 li
12.3828 71.9899 li
12.2628 72.1101 li
11.0629 72.1101 mo
11.0629 72.11 li
10.9428 71.9899 li
11.0629 71.8701 li
11.1827 71.9899 li
11.0629 72.1101 li
9.86283 72.1101 mo
9.86283 72.11 li
9.74281 71.9899 li
9.86283 71.8701 li
9.98284 71.9899 li
9.86283 72.1101 li
8.6628 72.1101 mo
8.6628 72.11 li
8.54279 71.9899 li
8.6628 71.8701 li
8.78281 71.9899 li
8.6628 72.1101 li
7.46278 72.1101 mo
7.46278 72.11 li
7.34276 71.9899 li
7.46278 71.8701 li
7.58279 71.9899 li
7.46278 72.1101 li
6.26287 72.1101 mo
6.26287 72.11 li
6.14286 71.9899 li
6.26287 71.8701 li
6.38277 71.9899 li
6.26287 72.1101 li
5.06284 72.1101 mo
5.06284 72.11 li
4.94283 71.9899 li
5.06284 71.8701 li
5.18286 71.9899 li
5.06284 72.1101 li
3.86282 72.1101 mo
3.86282 72.11 li
3.74281 71.9899 li
3.86282 71.8701 li
3.98283 71.9899 li
3.86282 72.1101 li
2.66279 72.1101 mo
2.66279 72.11 li
2.54278 71.9899 li
2.66279 71.8701 li
2.78281 71.9899 li
2.66279 72.1101 li
1.46289 72.1101 mo
1.46289 72.11 li
1.34287 71.9899 li
1.46289 71.8701 li
1.58278 71.9899 li
1.46289 72.1101 li
270.272 72.1 mo
270.252 72.1 li
270.142 71.9899 li
270.262 71.8701 li
270.382 71.9899 li
270.272 72.1 li
269.072 72.1 mo
269.052 72.1 li
268.942 71.9899 li
269.062 71.8701 li
269.182 71.9899 li
269.072 72.1 li
266.672 72.1 mo
266.652 72.1 li
266.542 71.9899 li
266.662 71.8701 li
266.782 71.9899 li
266.672 72.1 li
265.472 72.1 mo
265.452 72.1 li
265.342 71.9899 li
265.462 71.8701 li
265.582 71.9899 li
265.472 72.1 li
267.954 72.0177 mo
267.954 71.9622 li
267.982 71.9899 li
267.954 72.0177 li
f
267.872 72.1 mo
267.852 72.1 li
267.742 71.9899 li
267.862 71.8701 li
267.954 71.9622 li
267.954 72.0177 li
267.872 72.1 li
f
270.262 72.1101 mo
270.262 72.11 li
270.252 72.1 li
270.272 72.1 li
270.262 72.1101 li
269.062 72.1101 mo
269.062 72.11 li
269.052 72.1 li
269.072 72.1 li
269.062 72.1101 li
267.862 72.1101 mo
267.862 72.11 li
267.852 72.1 li
267.872 72.1 li
267.862 72.1101 li
266.662 72.1101 mo
266.662 72.11 li
266.652 72.1 li
266.672 72.1 li
266.662 72.1101 li
265.462 72.1101 mo
265.462 72.11 li
265.452 72.1 li
265.472 72.1 li
265.462 72.1101 li
f
.75 lw
392.299 123.01 mo
392.299 202.38 li
267.579 202.38 li
267.579 204.02 li
1 /0 /CSD get_res sepcs
1 sep
@
270.849 203.2 mo
267.579 213.01 li
264.309 203.2 li
270.849 203.2 li
cp
ef
267.579 188.21 mo
267.579 204.02 li
@
270.849 203.2 mo
267.579 213.01 li
264.309 203.2 li
270.849 203.2 li
cp
ef
%ADOBeginSubsetFont: KTKXGD+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/KTKXGD+SimSun-GBK-EUC-H 5 GetGlyphDirectory
7017 <001C60D8A8C9B5EE310254E0CC86CCE62E1002EF0D034FA4D5D667FC63
B1C342EC60F39E09D50CB8F91DBF593369B7D025F7C0065A5F4E05A4218C3DB7
A37C4FB65CB9C8DC36FD75D668D1312F0089DFB4D5FA6949AA39FB02376C8608
F71465D525AAF34EB9B084AE7D5B16BD7B196C98FD2B32C5E00604F8074903C8
419FE9B54ED30017E92368248FDB73B4BA130E6874F1B1722F4DC1AEBA964901
FAA19C656EFEBC0BFF10C13B8416778AA289A879656F6E0F225BE89C7890168A
958BA3444A6D2D4CF1A9838E7A3AE20BB7787B799233F36C7E67AAEDA4D0DD8A
D4AB7D8BB11BBF5D51B0F71A16C3AA96> |
17931 <001C60D8A8C9B5EE3103B8AEF5BA2AFCF3CB21F0C16C5F2F32F368918
93340305C38B916108A62B3A54EC4A8267FB5503BEA663A362571E92B3FD9132
1D8F8C1FD56170971394867180C0E01A8B9E8108A3F2678186126AFE5C684092
D0F1AB8B9EC71EDA5A87F87A1B38CEA19A46308AD8F727474D60F5E5362AD545
04337FECE7AEC982EE5EC7FA1A51EC4F03EF413195DE091306191B5A3CAA8F2C
11871A190B421F4D516227787688D8063CC7740EE3886195CDB308B595A5D533
0FD70BF84900503D41F973DCE5611955403433ABA8514978C158CBB36BAFF7B9
70BD6DBCAAF22D8B03AE3B7616B29B609753B2B4EF113B14B3CB4317B38535F6
F0717F326831D47F7D9395E9131E39E5CBCE68FD43C84CE8EEF29B726BDC0C0A
D5158FD7E0CE9F13820CC190A2EC97D540A3B21FA7399FE7204DF22C08C7080F
9A06512FA1714D4E4ABF2F23270E814CD2A57> |
18429 <001C60D8A8C9B5EE3103A00BA9709C24739630D70DCB9ED5B1C939DBD
B8753108C6B6AEB21B840A8AB05D9D88231EEEC773ED8DCAB9F114E6D3CF2238
245137E5CA60C4FA04C5232FD6BE880114634F77C3E07799397C5EB06AAAA0F0
EE78FB0B8638EB6D6514EB00BA27CAFC4B2EC42C18E750ADEECA23EC0D4B5F03
D1D3AC48BBFECBD34692578145A32B6CDCA8BF61577B597C9FF78C7439FF83BB
11B84D36F2C75A2CBC00940EE31AF07140C6C8699E362591BBD0D609C7CE018B
C2F8F8C55686919A01102B0C0380342A5F89DFBF3BDEC97376B335D5239131B3
9D0692785AEDBB3F28934189005A1E6577D0654B419C04E0FBDDED12484D6639
AF3E10F5ABD145D3C9D23> |
8273 <001C60D8A8C9B5EE310D991F82D8FC606D8F35C5B69427E6274A939C88
D01B05A52977427C91BD6A5BEBE2445B8801FBB3FCD81F655E2E5857D5DA5143
DE9CFD2A0E26F3B18C58D69C8B3F74C372A08664AB91409804538EC27395A273
1BDA4BF0FDB7623D4A5DFAC59413573DE1C8E4F7FBA66E7B685D4749EDC6C763
219CC1B695B7B892CBE8D997B68D977A9E3305495D166899FDDBE133B6D8B8C3
CA7349493EF83B63FB2CF6034C28F457801C9B80B4C1A831021C19DB280A05D0
11FD4FC019EC4252ED6CF1FE4B012F36D93897490B17F11146664896938A65A2
D07E114950CB45F30C44FCD1F98B684D97E8BE4CDEBFDC5A1C6EB02FE63DC59A
8317A98320E8EF0648D06323935482296C485DA44754BBE4409280F89A675105
B6164E773F74D78DDB7D41B37F2780052AD651E9F0E7AC6647834E20A322BB80
DD7D6213D361C5AC329E343F0ECEC3DD659FABC8FC19461E5D1E5EA144A9C90C
9CFF73B00B3749099CFE747426547BB3DA005431CAE908DEB8DBB03B269BC49A
382560F84696092A5485685951257773B8638542A25F1C> |
3515 <001C60D8A8C9B5EE310250288C1C6F6A69B2731737A9B23946AEC5233A
801EB2C5909A5919B48208B8D8388D1B961EA304687C305C7AB916EE17125871
C6891DD1E5391693BB9CA5D6D7D748962E76572C4F9C1871C498D4A3D9ED551A
49F74AF4515410DB4B324756E4232CCA02813D944CA0B9809B5F7E53C09B20FA
E7C12C78E095E2550538AC3BB15B200CEE219FBAB31D293B1F9493B8067FCA1C
EBD8BE885AE1174E8801FF69A40FAD7F4CE306AC1C75A05FF1A134E423720DD5
B14E8BDF3A0E13C60AF519485877754B98A249D0F0A4B8112AC28A2D97A06FF0
F96ED4C980C7A49BA4D70DE25DA6862C04C4E84A8AF71747408805559BE683A4
163E2D8E83585A53D2078BFE667C6D0C88B0DC6388775478AC771780685EAE8D
03> |
!
end
end end
%ADOEndSubsetFont
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.75 0 0 -9.75 0 0 ]msf
51.309 215.57 mo
(\033iF\013G\375\031\302\012= Q\015\273)
[9.75 10.491 9.75 9.75 10.491 9.75 0 ]xsh
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.75 0 0 -9.75 0 0 ]msf
254.469 150.32 mo
(\034_)sh
/KTKXGD+SimSun-GBK-EUC-H-Identity-H findfont [9.75 0 0 -9.75 0 0 ]msf
327.889 107.78 mo
(\012V)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/KTKXGD+SimSun-GBK-EUC-H-Identity-H uf
/KTKXGD+SimSun-GBK-EUC-H /CIDFont ur
/KTKXGE+SimSun-GBK-EUC-H-Identity-H uf
/KTKXGE+SimSun-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
